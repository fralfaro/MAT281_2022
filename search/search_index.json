{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home MAT281 - Aplicaciones de la Matem\u00e1tica en la Ingenier\u00eda Material El material est\u00e1 disponible en el siguiente repositorio , para obtener el c\u00f3digo de fuente basta con que ejecutes el siguiente comando: https://github.com/fralfaro/MAT281_2022 Identificaci\u00f3n de la asignatura Asignatura : Aplicaciones a la Matem\u00e1tica Sigla : MAT281 Prerrequisitos : Ninguno Unidad Acad\u00e9mica que lo imparte : Deparatamento de matem\u00e1ticas Eje formativo :Ingenier\u00eda Aplicada e Integraci\u00f3n Descripci\u00f3n de la Asignatura El estudiante adquiere competencias/destrezas b\u00e1sicas como Data Scientist (ocupando el lenguaje de programaci\u00f3n Python). Requisitos de entrada Utiliza comprende conceptos b\u00e1sicos de C\u00e1lculo-Algebra, Probabilidad-Estad\u00edstica y Optimizaci\u00f3n. Utiliza comprende conceptos b\u00e1sicos de Python. Contenidos tem\u00e1ticos Toolkit b\u00e1sico del curso Computaci\u00f3n cient\u00edfica Manipulaci\u00f3n de datos Visualizaci\u00f3n Machine Learning Evaluaci\u00f3n Laboratorios Semanal. Individual. Notas: 0, 25, 50, 75, 100. Plazo: final del d\u00eda de clases. Entregas fuera del plazo tienen nota cero (0). Tareas Mensual. Individual. Plazo: \\(T_1\\) : 31 de Octubre 2021. \\(T_2\\) : 12 de Diciembre 2021. Entregas fuera del plazo descuentan 25 puntos por d\u00eda (parte entera). Por ejemplo, un retraso de 15 minutos cuenta como un d\u00eda y descuenta 25 puntos. Proyecto Semestral Plazo: final del curso (28 de Diciembre 2021). Grupal (grupos aleatorios). Entregas fuera del plazo descuentan 25 puntos por d\u00eda (parte entera). Nota Final Sea \\(\\bar{n_l}\\) promedio de notas del laboratorio, \\(\\bar{n_t}\\) : promedio de notas de las tareas, \\(n_p\\) : nota del proyecto. Entonces la nota final del curso ( \\(N_f\\) ) ser\u00e1: \\[ N_f = 0.25\\bar{n_l} + 0.35\\bar{n_t} + 0.4n_p \\] \u00a1Importante! : Todos los entregables se deben subir al repositorio personal del estudiante (en GitHub). Las notas se trataran de actualizar al final de cada mes.","title":"Home"},{"location":"#home","text":"MAT281 - Aplicaciones de la Matem\u00e1tica en la Ingenier\u00eda","title":"Home"},{"location":"#material","text":"El material est\u00e1 disponible en el siguiente repositorio , para obtener el c\u00f3digo de fuente basta con que ejecutes el siguiente comando: https://github.com/fralfaro/MAT281_2022","title":"Material"},{"location":"#identificacion-de-la-asignatura","text":"Asignatura : Aplicaciones a la Matem\u00e1tica Sigla : MAT281 Prerrequisitos : Ninguno Unidad Acad\u00e9mica que lo imparte : Deparatamento de matem\u00e1ticas Eje formativo :Ingenier\u00eda Aplicada e Integraci\u00f3n","title":"Identificaci\u00f3n de la asignatura"},{"location":"#descripcion-de-la-asignatura","text":"El estudiante adquiere competencias/destrezas b\u00e1sicas como Data Scientist (ocupando el lenguaje de programaci\u00f3n Python).","title":"Descripci\u00f3n de la Asignatura"},{"location":"#requisitos-de-entrada","text":"Utiliza comprende conceptos b\u00e1sicos de C\u00e1lculo-Algebra, Probabilidad-Estad\u00edstica y Optimizaci\u00f3n. Utiliza comprende conceptos b\u00e1sicos de Python.","title":"Requisitos de entrada"},{"location":"#contenidos-tematicos","text":"Toolkit b\u00e1sico del curso Computaci\u00f3n cient\u00edfica Manipulaci\u00f3n de datos Visualizaci\u00f3n Machine Learning","title":"Contenidos tem\u00e1ticos"},{"location":"#evaluacion","text":"","title":"Evaluaci\u00f3n"},{"location":"#laboratorios","text":"Semanal. Individual. Notas: 0, 25, 50, 75, 100. Plazo: final del d\u00eda de clases. Entregas fuera del plazo tienen nota cero (0).","title":"Laboratorios"},{"location":"#tareas","text":"Mensual. Individual. Plazo: \\(T_1\\) : 31 de Octubre 2021. \\(T_2\\) : 12 de Diciembre 2021. Entregas fuera del plazo descuentan 25 puntos por d\u00eda (parte entera). Por ejemplo, un retraso de 15 minutos cuenta como un d\u00eda y descuenta 25 puntos.","title":"Tareas"},{"location":"#proyecto","text":"Semestral Plazo: final del curso (28 de Diciembre 2021). Grupal (grupos aleatorios). Entregas fuera del plazo descuentan 25 puntos por d\u00eda (parte entera).","title":"Proyecto"},{"location":"#nota-final","text":"Sea \\(\\bar{n_l}\\) promedio de notas del laboratorio, \\(\\bar{n_t}\\) : promedio de notas de las tareas, \\(n_p\\) : nota del proyecto. Entonces la nota final del curso ( \\(N_f\\) ) ser\u00e1: \\[ N_f = 0.25\\bar{n_l} + 0.35\\bar{n_t} + 0.4n_p \\] \u00a1Importante! : Todos los entregables se deben subir al repositorio personal del estudiante (en GitHub). Las notas se trataran de actualizar al final de cada mes.","title":"Nota Final"},{"location":"lectures/basic_tools/lecture_000_configuraciones/","text":"Configuraciones Git Puede descargar el instalador en la p\u00e1gina oficial (escoger el sistema operativo correspondiente). Para validar si tu instalaci\u00f3n fue correcta, debes ejecutar en la terminal: git --version Usuarios de Windows que no agregaron Git al PATH tendr\u00e1n que utilizar la terminal Git Bash . GitHub Utilizando tu correo institucional puedes registrarte a trav\u00e9s de GitHub Student Developer Pack , con el cual puedes acceder a repositorios privados, entre otras cosas. En caso contrario, puedes crear una cuenta directamente en el sitio oficial . Virtual Enviroments Conda Seguir la instalaci\u00f3n regular de desde la documentaci\u00f3n oficial seg\u00fan tu sistema operativo. Instalar Miniconda Windows : En su men\u00fa de inicio tendr\u00e1n dos nuevos programas Anaconda Prompt y Anaconda Powershell Prompt , pueden ocupar cualquiera. Personalmente prefiero Powershell . Linux : En la instalaci\u00f3n se recomienda agregar conda al PATH . Si cada vez que inicias una terminal vez el texto (base) al comienzo, debes ejecutar conda config --set auto_activate_base false y luego cada vez que quieras utilizar conda debes ejecutar conda activate . Poetry Poetry proporciona un instalador personalizado que instalar\u00e1 poetry aislado del resto de su sistema al vender sus dependencias. Esta es la forma recomendada de instalar poes\u00eda. osx/linux/bashonwindows curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - windows powershell (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python - Pycharm Se recomienda ocupar el IDE de Pycharm. Puede descargar el instalador en la p\u00e1gina oficial (escoger el sistema operativo correspondiente). Existen dos versiones: Professional (Pagado) y Comunnity (Gratis). Para efectos de este tutorial con la versi\u00f3n Comunnity ser\u00e1 suficiente. No es estrictamente necesario instalarlo, pero facilita bastante aspecto c\u00f3dificaci\u00f3n con Python y cosas de versionamiento. Entorno de trabajo Clonar el repositorio oficial de este tutorial: git clone https://gitlab.com/FAAM/basic_tools en alguna carpeta que estimes conveniente. Para crear el entorno virtual ejecuta el siguiente comando Conda : Crear ambiente virtual : conda env create -f environment.yml --yes Activar ambiente virtual : conda activate NAME_ENV Poetry : Crear ambiente virtual : poetry install Activar ambiente virtual : poetry shell Felicitaciones, tienes todo lo necesario para triunfar en este curso!","title":"Configuraciones"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#configuraciones","text":"","title":"Configuraciones"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#git","text":"Puede descargar el instalador en la p\u00e1gina oficial (escoger el sistema operativo correspondiente). Para validar si tu instalaci\u00f3n fue correcta, debes ejecutar en la terminal: git --version Usuarios de Windows que no agregaron Git al PATH tendr\u00e1n que utilizar la terminal Git Bash .","title":"Git"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#github","text":"Utilizando tu correo institucional puedes registrarte a trav\u00e9s de GitHub Student Developer Pack , con el cual puedes acceder a repositorios privados, entre otras cosas. En caso contrario, puedes crear una cuenta directamente en el sitio oficial .","title":"GitHub"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#virtual-enviroments","text":"","title":"Virtual Enviroments"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#conda","text":"Seguir la instalaci\u00f3n regular de desde la documentaci\u00f3n oficial seg\u00fan tu sistema operativo. Instalar Miniconda Windows : En su men\u00fa de inicio tendr\u00e1n dos nuevos programas Anaconda Prompt y Anaconda Powershell Prompt , pueden ocupar cualquiera. Personalmente prefiero Powershell . Linux : En la instalaci\u00f3n se recomienda agregar conda al PATH . Si cada vez que inicias una terminal vez el texto (base) al comienzo, debes ejecutar conda config --set auto_activate_base false y luego cada vez que quieras utilizar conda debes ejecutar conda activate .","title":"Conda"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#poetry","text":"Poetry proporciona un instalador personalizado que instalar\u00e1 poetry aislado del resto de su sistema al vender sus dependencias. Esta es la forma recomendada de instalar poes\u00eda. osx/linux/bashonwindows curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - windows powershell (Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python -","title":"Poetry"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#pycharm","text":"Se recomienda ocupar el IDE de Pycharm. Puede descargar el instalador en la p\u00e1gina oficial (escoger el sistema operativo correspondiente). Existen dos versiones: Professional (Pagado) y Comunnity (Gratis). Para efectos de este tutorial con la versi\u00f3n Comunnity ser\u00e1 suficiente. No es estrictamente necesario instalarlo, pero facilita bastante aspecto c\u00f3dificaci\u00f3n con Python y cosas de versionamiento.","title":"Pycharm"},{"location":"lectures/basic_tools/lecture_000_configuraciones/#entorno-de-trabajo","text":"Clonar el repositorio oficial de este tutorial: git clone https://gitlab.com/FAAM/basic_tools en alguna carpeta que estimes conveniente. Para crear el entorno virtual ejecuta el siguiente comando Conda : Crear ambiente virtual : conda env create -f environment.yml --yes Activar ambiente virtual : conda activate NAME_ENV Poetry : Crear ambiente virtual : poetry install Activar ambiente virtual : poetry shell Felicitaciones, tienes todo lo necesario para triunfar en este curso!","title":"Entorno de trabajo"},{"location":"lectures/basic_tools/lecture_000_intro/","text":"Introducci\u00f3n Sistema Operativo Personalmente recomiendo Linux , en particular distribuciones como Ubuntu, Mint o Fedora por su facilidad a la hora de instalar. En ocasiones las implementaciones en Windows no est\u00e1n completamente integradas e inclusive en ocasiones no est\u00e1n disponibles. Una alternativa es Windows Subsystem for Linux , pero lamentablemente no se asegura un 100% de compatibilidad. En el caso que poseas un equipo con macOS no deber\u00eda haber problema. Interfaz de L\u00ednea de Comandos ( Command Line Interface / CLI) Es un m\u00e9todo que permite a los usuarios interactuar con alg\u00fan programa inform\u00e1tico por medio de l\u00edneas de texto. T\u00edpicamente se hace uso de una terminal/ shell (ver imagen). En el d\u00eda a d\u00eda dentro de la oficina facilita flujo de trabajo. Permite moverse entre manipular directorios y ficheros, instalar/actualizar herramientas, aplicaciones, softwares, etc. Screenshot of a sample bash session in GNOME Terminal 3, Fedora 15. Wikipedia Python Python es un lenguaje de programaci\u00f3n interpretado cuya filosof\u00eda hace hincapi\u00e9 en la legibilidad de su c\u00f3digo. Se trata de un lenguaje de programaci\u00f3n multiparadigma, ya que soporta orientaci\u00f3n a objetos, programaci\u00f3n imperativa y, en menor medida, programaci\u00f3n funcional. Es un lenguaje interpretado, din\u00e1mico y multiplataforma. Las principales librer\u00edas cient\u00edficas a instalar y que ocuparemos durante el curso son: Numpy : Computaci\u00f3n cient\u00edfica. Pandas : An\u00e1lisis de datos. Matplotlib : Visualizaci\u00f3n. Scikit-Learn : Machine Learning Durante el curso se ocupar\u00e1n m\u00e1s librer\u00edas a modo de complementaci\u00f3n (ejemplo, scipy, seaborn, statsmodels ,etc.) Entorno Virtual Problemas recurrentes: - Dependencias de librer\u00edas ( packages ) incompatibles. - Dificultad a la hora de compartir y reproducir resultados, e.g. no conocer las versiones de las librer\u00edas instaladas. - Tener una m\u00e1quina virtual para cada desarrollo es tedioso y costoso. - Miedo constante a instalar algo nuevo y tu script vuelva a funcionar. Soluci\u00f3n Aislar el desarrollo con tal de mejorar la compatibilidad y reproducibilidad de resultados. Para el curso (es recomendable) Package, dependency and environment management for any language\u2014Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, FORTRAN. (Link) \u00bfPor qu\u00e9 Conda? Open Source Gestor de librer\u00edas y entornos virtuales. Compatible con Linux, Windows y macOS. Es agn\u00f3stico al lenguaje de programaci\u00f3n (inicialmente fue desarrollado para Python). Es de f\u00e1cil instalaci\u00f3n y uso. Otras alternativas pip + virtualenv : el primero es el gestor favorito de librer\u00edas de Python y el segundo es un gestos de entornos virtuales, el contra es que es exclusivo de Python. Pipenv o Poetry : librer\u00edas enfocadas al manejo de dependencias (muy recomendables!) Entorno de desarrollo integrado Un entorno de desarrollo integrado , en ingl\u00e9s Integrated Development Environment (IDE) , es una aplicaci\u00f3n inform\u00e1tica que proporciona servicios integrales para facilitarle al desarrollador o programador el desarrollo de software. Normalmente, un IDE consiste de un editor de c\u00f3digo fuente, herramientas de construcci\u00f3n autom\u00e1ticas y un depurador. La mayor\u00eda de los IDE tienen auto-completado inteligente de c\u00f3digo (IntelliSense). Algunos IDE contienen un compilador, un int\u00e9rprete, o ambos, tales como NetBeans y Eclipse; otros no, tales como SharpDevelop y Lazarus. Existen varios IDE populares que sirven para varios lenguajes de programaci+on. En python, el m\u00e1s recomendable es Pycharm . Pycharm PyCharm es un IDE para desarrolladores profesionales. Fue creado por JetBrains, una empresa conocida por crear excelentes herramientas de desarrollo de software. Hay dos versiones de PyCharm: Community : versi\u00f3n gratuita de c\u00f3digo abierto, ligera, buena para Python y desarrollo cient\u00edfico Professional : versi\u00f3n de pago, IDE con todas las funciones con soporte para desarrollo web tambi\u00e9n Observaci\u00f3n Se recomienda que puedan descargar Pycharm (en su versi\u00f3n gratuita) para poder familiarizarse con este tipo de herramientas, aunque el curso est\u00e1 orientado a trabajar sobre la terminal y con jupyter notebook. Project Jupyter Project Jupyter exists to develop open-source software, open-standards, and services for interactive computing across dozens of programming languages.* Jupyter Notebook Es una aplicaci\u00f3n web que permite crear y compartir documentos que contienen c\u00f3digo, ecuaciones, visualizaciones y texto. Entre sus usos se encuentra: Limpieza de datos Transformaci\u00f3n de datos Simulaciones num\u00e9ricas Modelamiendo Estad\u00edstico Visualizaci\u00f3n de Datos Machine Learning Mucho m\u00e1s. Jupyter Lab Es la siguiente generaci\u00f3n de la interfaz de usuario de Project Jupyter . Similar a Jupyter Notebook cuenta con la facilidad de editar archivos .ipynb (notebooks) y heramientas como una terminal, editor de texto, explorador de archivos, etc. Eventualmente Jupyter Lab reemplazar\u00e1 a Jupyter Notebok (aunque la versi\u00f3n estable fue liberada hace algunos meses). Cuenta con una serie de extensiones que puedes instalar (y desarrollar inclurisve. M\u00e1s informaci\u00f3n en: https://github.com/jupyterlab/jupyterlab-demo Puedes probar Jupyter Lab con solo dos clicks! Ingresar a este link: https://github.com/jupyterlab/jupyterlab-demo Hacer click en el icono de binder: Otros Proyectos Entre los m\u00e1s conocidos se encuentran: JupyterHub : Distribuir Jupyter Noterbooks a m\u00faltiples usuarios. nbviewer : Compartir Jupyter Notebooks. Jupyter Book : Construir y publicar libros de t\u00f3picos computacionales. Jupyter Docker Stacks : Im\u00e1genes de Jupyter para utilizar en Docker. Versionamiento de C\u00f3digo Permite compartir el c\u00f3digo fuente de nuestros desarrollos y a la vez mantener un registro de los cambios por los que va pasando. Herramienta m\u00e1s importante y fundamental dentro del desarrollo. Tipos de versionadores de c\u00f3digo: Sistemas Centralizados : Son los m\u00e1s \"tradicionales\", por ejemplo SVN, CVS, etc. Sistemas Distribuidos : son los que est\u00e1n en auge actualmente como: Git, Mercurial, Bazaar, etc. Git Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Es importante comprender que Git es la herramienta que permite versionar tus proyectos, sin embargo, a la hora de querer aprovechar m\u00e1s funcionalidades, como compartir o sincronizar tus trabajos se hace necesario utilizar servicios externos. Los m\u00e1s famosos son: GitHub GitLab Bitbucket Piensa lo siguiente, cualquiera podr\u00eda implementar un correo electr\u00f3nico entre dos computadoras conectadas entre ellas por LAN pero no conectadas a Internet. Sin embargo la gente utiliza servicios como Gmail, Outlook, etc. con tal de aprovechar de mejor manera las funcionalidades que ofrece la tecnolog\u00eda del correo electr\u00f3nico. Esta es una analog\u00eda perfecta entre las diferencias de Git y los servicios como GitHub o GitLab. GitHub GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside 30 million developers. Gitlab Gitlab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider. Bitbucket Bitbucket is more than just Git code management. Bitbucket gives teams one place to plan projects, collaborate on code, test, and deploy. . Resumen Sistema operativo: Cualquiera, sin embargo se recomiendan alternativas basadas en Unix. Lenguaje de programaci\u00f3n: Python Entorno virtual: Conda, preferentemetne a trav\u00e9s de miniconda. Entorno de trabajo: Jupyter Lab. Versionamiento: Git & GitHub.","title":"Introducci\u00f3n"},{"location":"lectures/basic_tools/lecture_000_intro/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"lectures/basic_tools/lecture_000_intro/#sistema-operativo","text":"Personalmente recomiendo Linux , en particular distribuciones como Ubuntu, Mint o Fedora por su facilidad a la hora de instalar. En ocasiones las implementaciones en Windows no est\u00e1n completamente integradas e inclusive en ocasiones no est\u00e1n disponibles. Una alternativa es Windows Subsystem for Linux , pero lamentablemente no se asegura un 100% de compatibilidad. En el caso que poseas un equipo con macOS no deber\u00eda haber problema.","title":"Sistema Operativo"},{"location":"lectures/basic_tools/lecture_000_intro/#interfaz-de-linea-de-comandos-command-line-interface-cli","text":"Es un m\u00e9todo que permite a los usuarios interactuar con alg\u00fan programa inform\u00e1tico por medio de l\u00edneas de texto. T\u00edpicamente se hace uso de una terminal/ shell (ver imagen). En el d\u00eda a d\u00eda dentro de la oficina facilita flujo de trabajo. Permite moverse entre manipular directorios y ficheros, instalar/actualizar herramientas, aplicaciones, softwares, etc. Screenshot of a sample bash session in GNOME Terminal 3, Fedora 15. Wikipedia","title":"Interfaz de L\u00ednea de Comandos (Command Line Interface / CLI)"},{"location":"lectures/basic_tools/lecture_000_intro/#python","text":"Python es un lenguaje de programaci\u00f3n interpretado cuya filosof\u00eda hace hincapi\u00e9 en la legibilidad de su c\u00f3digo. Se trata de un lenguaje de programaci\u00f3n multiparadigma, ya que soporta orientaci\u00f3n a objetos, programaci\u00f3n imperativa y, en menor medida, programaci\u00f3n funcional. Es un lenguaje interpretado, din\u00e1mico y multiplataforma. Las principales librer\u00edas cient\u00edficas a instalar y que ocuparemos durante el curso son: Numpy : Computaci\u00f3n cient\u00edfica. Pandas : An\u00e1lisis de datos. Matplotlib : Visualizaci\u00f3n. Scikit-Learn : Machine Learning Durante el curso se ocupar\u00e1n m\u00e1s librer\u00edas a modo de complementaci\u00f3n (ejemplo, scipy, seaborn, statsmodels ,etc.)","title":"Python"},{"location":"lectures/basic_tools/lecture_000_intro/#entorno-virtual","text":"Problemas recurrentes: - Dependencias de librer\u00edas ( packages ) incompatibles. - Dificultad a la hora de compartir y reproducir resultados, e.g. no conocer las versiones de las librer\u00edas instaladas. - Tener una m\u00e1quina virtual para cada desarrollo es tedioso y costoso. - Miedo constante a instalar algo nuevo y tu script vuelva a funcionar. Soluci\u00f3n Aislar el desarrollo con tal de mejorar la compatibilidad y reproducibilidad de resultados. Para el curso (es recomendable) Package, dependency and environment management for any language\u2014Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, FORTRAN. (Link) \u00bfPor qu\u00e9 Conda? Open Source Gestor de librer\u00edas y entornos virtuales. Compatible con Linux, Windows y macOS. Es agn\u00f3stico al lenguaje de programaci\u00f3n (inicialmente fue desarrollado para Python). Es de f\u00e1cil instalaci\u00f3n y uso. Otras alternativas pip + virtualenv : el primero es el gestor favorito de librer\u00edas de Python y el segundo es un gestos de entornos virtuales, el contra es que es exclusivo de Python. Pipenv o Poetry : librer\u00edas enfocadas al manejo de dependencias (muy recomendables!)","title":"Entorno Virtual"},{"location":"lectures/basic_tools/lecture_000_intro/#entorno-de-desarrollo-integrado","text":"Un entorno de desarrollo integrado , en ingl\u00e9s Integrated Development Environment (IDE) , es una aplicaci\u00f3n inform\u00e1tica que proporciona servicios integrales para facilitarle al desarrollador o programador el desarrollo de software. Normalmente, un IDE consiste de un editor de c\u00f3digo fuente, herramientas de construcci\u00f3n autom\u00e1ticas y un depurador. La mayor\u00eda de los IDE tienen auto-completado inteligente de c\u00f3digo (IntelliSense). Algunos IDE contienen un compilador, un int\u00e9rprete, o ambos, tales como NetBeans y Eclipse; otros no, tales como SharpDevelop y Lazarus. Existen varios IDE populares que sirven para varios lenguajes de programaci+on. En python, el m\u00e1s recomendable es Pycharm .","title":"Entorno de desarrollo integrado"},{"location":"lectures/basic_tools/lecture_000_intro/#pycharm","text":"PyCharm es un IDE para desarrolladores profesionales. Fue creado por JetBrains, una empresa conocida por crear excelentes herramientas de desarrollo de software. Hay dos versiones de PyCharm: Community : versi\u00f3n gratuita de c\u00f3digo abierto, ligera, buena para Python y desarrollo cient\u00edfico Professional : versi\u00f3n de pago, IDE con todas las funciones con soporte para desarrollo web tambi\u00e9n","title":"Pycharm"},{"location":"lectures/basic_tools/lecture_000_intro/#observacion","text":"Se recomienda que puedan descargar Pycharm (en su versi\u00f3n gratuita) para poder familiarizarse con este tipo de herramientas, aunque el curso est\u00e1 orientado a trabajar sobre la terminal y con jupyter notebook.","title":"Observaci\u00f3n"},{"location":"lectures/basic_tools/lecture_000_intro/#project-jupyter","text":"Project Jupyter exists to develop open-source software, open-standards, and services for interactive computing across dozens of programming languages.*","title":"Project Jupyter"},{"location":"lectures/basic_tools/lecture_000_intro/#jupyter-notebook","text":"Es una aplicaci\u00f3n web que permite crear y compartir documentos que contienen c\u00f3digo, ecuaciones, visualizaciones y texto. Entre sus usos se encuentra: Limpieza de datos Transformaci\u00f3n de datos Simulaciones num\u00e9ricas Modelamiendo Estad\u00edstico Visualizaci\u00f3n de Datos Machine Learning Mucho m\u00e1s.","title":"Jupyter Notebook"},{"location":"lectures/basic_tools/lecture_000_intro/#jupyter-lab","text":"Es la siguiente generaci\u00f3n de la interfaz de usuario de Project Jupyter . Similar a Jupyter Notebook cuenta con la facilidad de editar archivos .ipynb (notebooks) y heramientas como una terminal, editor de texto, explorador de archivos, etc. Eventualmente Jupyter Lab reemplazar\u00e1 a Jupyter Notebok (aunque la versi\u00f3n estable fue liberada hace algunos meses). Cuenta con una serie de extensiones que puedes instalar (y desarrollar inclurisve. M\u00e1s informaci\u00f3n en: https://github.com/jupyterlab/jupyterlab-demo Puedes probar Jupyter Lab con solo dos clicks! Ingresar a este link: https://github.com/jupyterlab/jupyterlab-demo Hacer click en el icono de binder:","title":"Jupyter Lab"},{"location":"lectures/basic_tools/lecture_000_intro/#otros-proyectos","text":"Entre los m\u00e1s conocidos se encuentran: JupyterHub : Distribuir Jupyter Noterbooks a m\u00faltiples usuarios. nbviewer : Compartir Jupyter Notebooks. Jupyter Book : Construir y publicar libros de t\u00f3picos computacionales. Jupyter Docker Stacks : Im\u00e1genes de Jupyter para utilizar en Docker.","title":"Otros Proyectos"},{"location":"lectures/basic_tools/lecture_000_intro/#versionamiento-de-codigo","text":"Permite compartir el c\u00f3digo fuente de nuestros desarrollos y a la vez mantener un registro de los cambios por los que va pasando. Herramienta m\u00e1s importante y fundamental dentro del desarrollo. Tipos de versionadores de c\u00f3digo: Sistemas Centralizados : Son los m\u00e1s \"tradicionales\", por ejemplo SVN, CVS, etc. Sistemas Distribuidos : son los que est\u00e1n en auge actualmente como: Git, Mercurial, Bazaar, etc.","title":"Versionamiento de C\u00f3digo"},{"location":"lectures/basic_tools/lecture_000_intro/#git","text":"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Es importante comprender que Git es la herramienta que permite versionar tus proyectos, sin embargo, a la hora de querer aprovechar m\u00e1s funcionalidades, como compartir o sincronizar tus trabajos se hace necesario utilizar servicios externos. Los m\u00e1s famosos son: GitHub GitLab Bitbucket Piensa lo siguiente, cualquiera podr\u00eda implementar un correo electr\u00f3nico entre dos computadoras conectadas entre ellas por LAN pero no conectadas a Internet. Sin embargo la gente utiliza servicios como Gmail, Outlook, etc. con tal de aprovechar de mejor manera las funcionalidades que ofrece la tecnolog\u00eda del correo electr\u00f3nico. Esta es una analog\u00eda perfecta entre las diferencias de Git y los servicios como GitHub o GitLab.","title":"Git"},{"location":"lectures/basic_tools/lecture_000_intro/#github","text":"GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside 30 million developers.","title":"GitHub"},{"location":"lectures/basic_tools/lecture_000_intro/#gitlab","text":"Gitlab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider.","title":"Gitlab"},{"location":"lectures/basic_tools/lecture_000_intro/#bitbucket","text":"Bitbucket is more than just Git code management. Bitbucket gives teams one place to plan projects, collaborate on code, test, and deploy. .","title":"Bitbucket"},{"location":"lectures/basic_tools/lecture_000_intro/#resumen","text":"Sistema operativo: Cualquiera, sin embargo se recomiendan alternativas basadas en Unix. Lenguaje de programaci\u00f3n: Python Entorno virtual: Conda, preferentemetne a trav\u00e9s de miniconda. Entorno de trabajo: Jupyter Lab. Versionamiento: Git & GitHub.","title":"Resumen"},{"location":"lectures/basic_tools/lecture_011_os/","text":"Linux Introducci\u00f3n GNU/Linux es la denominaci\u00f3n t\u00e9cnica y generalizada que reciben una serie de sistemas operativos de tipo Unix, que tambi\u00e9n suelen ser de c\u00f3digo abierto, multiplataforma, multiusuario y multitarea.Estos sistemas operativos est\u00e1n formados mediante la combinaci\u00f3n de varios proyectos, entre los cuales destaca el entorno GNU, encabezado por el programador estadounidense Richard Stallman junto a la Free Software Foundation, una fundaci\u00f3n cuyo prop\u00f3sito es difundir el software libre (Open source), as\u00ed como tambi\u00e9n el n\u00facleo de sistema operativo conocido como \u00abLinux\u00bb , encabezado por el programador finland\u00e9s Linus Torvalds . Comandos B\u00e1sicos (por l\u00ednea de comando) comando pwd Usa el comando pwd para encontrar la ruta del directorio (carpeta) de trabajo actual en el que te encuentras. El comando devolver\u00e1 una ruta absoluta (completa), que es b\u00e1sicamente una ruta de todos los directorios que comienzan con una barra diagonal (/) Un ejemplo de una ruta absoluta es /home/nombredeusuario . !pwd comando cd Para navegar por los archivos y directorios de Linux, usa el comando cd. Te pedir\u00e1 la ruta completa o el nombre del directorio, dependiendo del directorio de trabajo actual en el que te encuentres. Supongamos que est\u00e1s en /home/nombredeusuario/Documentos y deseas ir a Fotos, un subdirectorio de Documentos. Para hacerlo, simplemente escribe el siguiente comando: cd Fotos. Otro escenario es si deseas ir a un directorio completamente nuevo, por ejemplo, /home/nombredeusuario/Peliculas . En este caso, debes escribir cd seguido de la ruta absoluta del directorio: cd /home/nombredeusuario/Peliculas . Hay algunos atajos para ayudarte a navegar r\u00e1pidamente: cd .. (con dos puntos) para ir un directorio hacia arriba cd para ir directamente a la carpeta de inicio Como nota al margen, el shell de Linux distingue entre may\u00fasculas y min\u00fasculas. Por lo tanto, debes escribir el nombre del directorio de forma exacta. !cd /home/fralfaro/PycharmProjects && pwd !cd .. && pwd !cd && pwd comando ls El comando ls se usa para ver el contenido de un directorio. Por defecto, este comando mostrar\u00e1 el contenido de tu directorio de trabajo actual. Si deseas ver el contenido de otros directorios, escribe ls y luego la ruta del directorio. Por ejemplo, ingresa ls /home/nombredeusuario/Documentos para ver el contenido de Documentos. Hay variaciones que puedes usar con el comando ls: ls -R tambi\u00e9n listar\u00e1 todos los archivos en los subdirectorios ls -a mostrar\u00e1 los archivos ocultos ls -al listar\u00e1 los archivos y directorios con informaci\u00f3n detallada como los permisos, el tama\u00f1o, el propietario, etc. !ls !ls -R !ls -a !ls -al comando cat Se utiliza para listar el contenido de un archivo en la salida est\u00e1ndar (sdout). Para ejecutar este comando, escribe cat seguido del nombre del archivo y su extensi\u00f3n. Por ejemplo: cat archivo.txt. Aqu\u00ed hay otras formas de usar el comando cat: cat > nombredearchivo crea un nuevo archivo. cat nombredearchivo1 nombredearchivo2>nombredearchivo3 une dos archivos (1 y 2) y almacena la salida de ellos en un nuevo archivo (3) convertir un archivo a may\u00fasculas o min\u00fasculas, cat nombredearchivo | tr a-z A-Z> salida.txt !cat archivo.txt comando cp Usa el comando cp para copiar archivos del directorio actual a un directorio diferente. Por ejemplo: !cp archivo.txt archivo_02.txt comando mv El uso principal del comando mv es mover archivos, aunque tambi\u00e9n se puede usar para cambiar el nombre de los archivos. Los argumentos en mv son similares al comando cp. Debes escribir mv, el nombre del archivo y el directorio destino. !mv archivo_02.txt linux Para cambiar el nombre de los archivos, el comando de Linux es mv nombreviejo.ext nombrenuevo.ext comando mkdir Usa el comando mkdir para crear un nuevo directorio: si escribes mkdir Musica, crear\u00e1 un directorio llamado Musica. Tambi\u00e9n hay comandos adicionales de mkdir: Para generar un nuevo directorio dentro de otro directorio, usa este comando b\u00e1sico de Linux mkdir Musica/Nuevoarchivo Usa la opci\u00f3n p (padres) para crear un directorio entre dos directorios existentes. Por ejemplo, mkdir -p Musica/2020/Nuevoarchivo crear\u00e1 el nuevo archivo \u00ab2020\u00bb. !mkdir Carpeta !mkdir Carpeta/nueva_carpeta comando touch El comando touch te permite crear un nuevo archivo en blanco a trav\u00e9s de la l\u00ednea de comando de Linux. Como ejemplo, ingresa touch /home/nombredeusuario/Documentos/Web.html para crear un archivo HTML titulado Web en el directorio Documentos. !touch Web.html !ls comando rmdir Si necesitas eliminar un directorio, usa el comando rmdir. Sin embargo, rmdir solo te permite eliminar directorios vac\u00edos. !rmdir Carpeta !rmdir Carpeta/nueva_carpeta comando rm El comando rm se usa para eliminar directorios y el contenido dentro de ellos. Si solo deseas eliminar el directorio, como alternativa a rmdir, usa rm -r. Nota : Ten mucho cuidado con este comando y verifica en qu\u00e9 directorio te encuentras. Este comando elimina todo y no se puede deshacer. !rm -r Carpeta !rm Web.html linux/archivo_02.txt Referencia The Ultimate Linux Command Line Guide - Full Bash Tutorial 35 comandos b\u00e1sicos de Linux que todo usuario debe saber","title":"Linux"},{"location":"lectures/basic_tools/lecture_011_os/#linux","text":"","title":"Linux"},{"location":"lectures/basic_tools/lecture_011_os/#introduccion","text":"GNU/Linux es la denominaci\u00f3n t\u00e9cnica y generalizada que reciben una serie de sistemas operativos de tipo Unix, que tambi\u00e9n suelen ser de c\u00f3digo abierto, multiplataforma, multiusuario y multitarea.Estos sistemas operativos est\u00e1n formados mediante la combinaci\u00f3n de varios proyectos, entre los cuales destaca el entorno GNU, encabezado por el programador estadounidense Richard Stallman junto a la Free Software Foundation, una fundaci\u00f3n cuyo prop\u00f3sito es difundir el software libre (Open source), as\u00ed como tambi\u00e9n el n\u00facleo de sistema operativo conocido como \u00abLinux\u00bb , encabezado por el programador finland\u00e9s Linus Torvalds .","title":"Introducci\u00f3n"},{"location":"lectures/basic_tools/lecture_011_os/#comandos-basicos-por-linea-de-comando","text":"","title":"Comandos B\u00e1sicos (por l\u00ednea de comando)"},{"location":"lectures/basic_tools/lecture_011_os/#comando-pwd","text":"Usa el comando pwd para encontrar la ruta del directorio (carpeta) de trabajo actual en el que te encuentras. El comando devolver\u00e1 una ruta absoluta (completa), que es b\u00e1sicamente una ruta de todos los directorios que comienzan con una barra diagonal (/) Un ejemplo de una ruta absoluta es /home/nombredeusuario . !pwd","title":"comando pwd"},{"location":"lectures/basic_tools/lecture_011_os/#comando-cd","text":"Para navegar por los archivos y directorios de Linux, usa el comando cd. Te pedir\u00e1 la ruta completa o el nombre del directorio, dependiendo del directorio de trabajo actual en el que te encuentres. Supongamos que est\u00e1s en /home/nombredeusuario/Documentos y deseas ir a Fotos, un subdirectorio de Documentos. Para hacerlo, simplemente escribe el siguiente comando: cd Fotos. Otro escenario es si deseas ir a un directorio completamente nuevo, por ejemplo, /home/nombredeusuario/Peliculas . En este caso, debes escribir cd seguido de la ruta absoluta del directorio: cd /home/nombredeusuario/Peliculas . Hay algunos atajos para ayudarte a navegar r\u00e1pidamente: cd .. (con dos puntos) para ir un directorio hacia arriba cd para ir directamente a la carpeta de inicio Como nota al margen, el shell de Linux distingue entre may\u00fasculas y min\u00fasculas. Por lo tanto, debes escribir el nombre del directorio de forma exacta. !cd /home/fralfaro/PycharmProjects && pwd !cd .. && pwd !cd && pwd","title":"comando cd"},{"location":"lectures/basic_tools/lecture_011_os/#comando-ls","text":"El comando ls se usa para ver el contenido de un directorio. Por defecto, este comando mostrar\u00e1 el contenido de tu directorio de trabajo actual. Si deseas ver el contenido de otros directorios, escribe ls y luego la ruta del directorio. Por ejemplo, ingresa ls /home/nombredeusuario/Documentos para ver el contenido de Documentos. Hay variaciones que puedes usar con el comando ls: ls -R tambi\u00e9n listar\u00e1 todos los archivos en los subdirectorios ls -a mostrar\u00e1 los archivos ocultos ls -al listar\u00e1 los archivos y directorios con informaci\u00f3n detallada como los permisos, el tama\u00f1o, el propietario, etc. !ls !ls -R !ls -a !ls -al","title":"comando ls"},{"location":"lectures/basic_tools/lecture_011_os/#comando-cat","text":"Se utiliza para listar el contenido de un archivo en la salida est\u00e1ndar (sdout). Para ejecutar este comando, escribe cat seguido del nombre del archivo y su extensi\u00f3n. Por ejemplo: cat archivo.txt. Aqu\u00ed hay otras formas de usar el comando cat: cat > nombredearchivo crea un nuevo archivo. cat nombredearchivo1 nombredearchivo2>nombredearchivo3 une dos archivos (1 y 2) y almacena la salida de ellos en un nuevo archivo (3) convertir un archivo a may\u00fasculas o min\u00fasculas, cat nombredearchivo | tr a-z A-Z> salida.txt !cat archivo.txt","title":"comando cat"},{"location":"lectures/basic_tools/lecture_011_os/#comando-cp","text":"Usa el comando cp para copiar archivos del directorio actual a un directorio diferente. Por ejemplo: !cp archivo.txt archivo_02.txt","title":"comando cp"},{"location":"lectures/basic_tools/lecture_011_os/#comando-mv","text":"El uso principal del comando mv es mover archivos, aunque tambi\u00e9n se puede usar para cambiar el nombre de los archivos. Los argumentos en mv son similares al comando cp. Debes escribir mv, el nombre del archivo y el directorio destino. !mv archivo_02.txt linux Para cambiar el nombre de los archivos, el comando de Linux es mv nombreviejo.ext nombrenuevo.ext","title":"comando mv"},{"location":"lectures/basic_tools/lecture_011_os/#comando-mkdir","text":"Usa el comando mkdir para crear un nuevo directorio: si escribes mkdir Musica, crear\u00e1 un directorio llamado Musica. Tambi\u00e9n hay comandos adicionales de mkdir: Para generar un nuevo directorio dentro de otro directorio, usa este comando b\u00e1sico de Linux mkdir Musica/Nuevoarchivo Usa la opci\u00f3n p (padres) para crear un directorio entre dos directorios existentes. Por ejemplo, mkdir -p Musica/2020/Nuevoarchivo crear\u00e1 el nuevo archivo \u00ab2020\u00bb. !mkdir Carpeta !mkdir Carpeta/nueva_carpeta","title":"comando mkdir"},{"location":"lectures/basic_tools/lecture_011_os/#comando-touch","text":"El comando touch te permite crear un nuevo archivo en blanco a trav\u00e9s de la l\u00ednea de comando de Linux. Como ejemplo, ingresa touch /home/nombredeusuario/Documentos/Web.html para crear un archivo HTML titulado Web en el directorio Documentos. !touch Web.html !ls","title":"comando touch"},{"location":"lectures/basic_tools/lecture_011_os/#comando-rmdir","text":"Si necesitas eliminar un directorio, usa el comando rmdir. Sin embargo, rmdir solo te permite eliminar directorios vac\u00edos. !rmdir Carpeta !rmdir Carpeta/nueva_carpeta","title":"comando rmdir"},{"location":"lectures/basic_tools/lecture_011_os/#comando-rm","text":"El comando rm se usa para eliminar directorios y el contenido dentro de ellos. Si solo deseas eliminar el directorio, como alternativa a rmdir, usa rm -r. Nota : Ten mucho cuidado con este comando y verifica en qu\u00e9 directorio te encuentras. Este comando elimina todo y no se puede deshacer. !rm -r Carpeta !rm Web.html linux/archivo_02.txt","title":"comando rm"},{"location":"lectures/basic_tools/lecture_011_os/#referencia","text":"The Ultimate Linux Command Line Guide - Full Bash Tutorial 35 comandos b\u00e1sicos de Linux que todo usuario debe saber","title":"Referencia"},{"location":"lectures/basic_tools/lecture_012_python/","text":"Python Nomenclatura b\u00e1sica Hola mundo! Escribamos nuestro primer programa de Python, \"\u00a1Hola, mundo!\". Es un programa simple que imprime Hello World! en el dispositivo de salida est\u00e1ndar (pantalla). # imprimir \"Hola Mundo!\" print ( \"Hola Mundo!\" ); Variables Una variable es una ubicaci\u00f3n con nombre utilizada para almacenar datos en la memoria. Aqu\u00ed hay un ejemplo: # crear e imprimir variables a = 5 print ( \"a =\" , 5 ) a = \"cinco\" print ( \"a =\" , a ) Operadores b\u00e1sico Los operadores son s\u00edmbolos especiales que realizan operaciones en operandos (variables y valores). Hablemos de operadores aritm\u00e9ticos y de asignaci\u00f3n en esta parte. # operaciones basicas x = 14 y = 4 # suma print ( 'x + y =' , x + y ) # Output: x + y = 18 # resta print ( 'x - y =' , x - y ) # Output: x - y = 10 # multiplicacion print ( 'x * y =' , x * y ) # Output: x * y = 56 # division print ( 'x / y =' , x / y ) # Output: x / y = 3.5 # cuociente print ( 'x // y =' , x // y ) # Output: x // y = 3 # resto print ( 'x % y =' , x % y ) # Output: x % y = 2 Operadores de asignaci\u00f3n Los operadores de asignaci\u00f3n se utilizan para asignar valores a las variables. Ya has visto el uso de = operator. Probemos algunos operadores de asignaci\u00f3n m\u00e1s. # operadores de asignacion x = 5 # x += 5 ----> x = x + 5 x += 5 print ( x ) # Output: 10 # x /= 5 ----> x = x / 5 x /= 5 print ( x ) # Output: 2.0 Inputs por el usuario En Python, puede usar la funci\u00f3n input() para tomar la entrada del usuario. Por ejemplo: # inputs por el usuario inputString = input ( 'Escriba una oracion:' ) print ( 'Su oracion es:' , inputString ) Conversi\u00f3n de tipo The process of converting the value of one data type (integer, string, float, etc.) to another is called type conversion. Python has two types of type conversion. Impl\u00edcita # correcto num_int = 123 # integer type num_flo = 1.23 # float type num_new = num_int + num_flo print ( \"Valor de num_new:\" , num_new ) print ( \"tipo de datos de num_new:\" , type ( num_new )) # incorrecto num_int = 123 # int type num_str = \"456\" # str type print ( num_int + num_str ) Expl\u00edcito num_int = 123 # int type num_str = \"456\" # str type # explicitly converted to int type num_str = int ( num_str ) print ( num_int + num_str ) Python tipos num\u00e9ricos Python admite enteros, n\u00fameros de coma flotante y n\u00fameros complejos. Se definen como int, float y clase compleja en Python. Adem\u00e1s de eso, los booleanos: verdadero y falso son un subtipo de enteros. print ( type ( 5 )) # Output: <class> print ( type ( 5.0 )) # <class> c = 5 + 3 j print ( type ( c )) Manejo de excepciones de Python Los errores que se producen en tiempo de ejecuci\u00f3n se denominan excepciones. Ocurren, por ejemplo, cuando un archivo que intentamos abrir no existe FileNotFoundError , dividiendo un n\u00famero por cero ZeroDivisionError , etc. Si no se manejan las excepciones, se escupe un mensaje de error y nuestro programa se detiene repentinamente e inesperadamente. En Python, las excepciones se pueden manejar usando la declaraci\u00f3n try. Cuando se detectan excepciones, depende de usted qu\u00e9 operador realizar. # importar modulo sys import sys lista_random = [ 'a' , 0 , 2 ] for elemento in lista_random : try : print ( \"La entrada es \" , elemento ) r = 1 / int ( elemento ) break except : print ( \"Oops! ocurrio un\" , sys . exc_info ()[ 0 ]) print ( \"Siguiente entrada.\" ) print () print ( \"El reciproco de\" , elemento , \"es\" , r ) Algunas Excepciones Comunes NameError : Esta excepci\u00f3n es levantada cuando el programa no puede encontrar un nombre local o global. El nombre que podr\u00eda no ser encontrado est\u00e1 incluido en el mensaje de error. TypeError : Esta excepci\u00f3n es levantada cuando una funci\u00f3n se le pasa un objeto del tipo inapropiado como su argumento. M\u00e1s detalles sobre el tipo incorrecto son proporcionados en el mensaje de error. ValueError : Esta excepci\u00f3n ocurre cuando un argumento de funci\u00f3n tiene el tipo correcto pero un valor inapropiado. NotImplementedError : Esta excepci\u00f3n es levantada cuando se supone que un objeto apoye una operaci\u00f3n pero no ha sido implementado a\u00fan. No deber\u00edas usar este error cuando la funci\u00f3n dada no deba apoyar al tipo de argumento de entrada. En esas situaciones, levantar una excepci\u00f3n TypeError es m\u00e1s apropiado. ZeroDivisionError : Esta excepci\u00f3n es levantada cuando proporcionas el segundo argumento para una operaci\u00f3n de divisi\u00f3n o m\u00f3dulo como cero. FileNotFoundError : Esta excepci\u00f3n es levantada cuando el archivo o diccionario que el programa solicit\u00f3 no existe. Aserciones en python Las aserciones son expresiones booleanas que comprueban si las condiciones devuelven verdaderas o no. Si es cierto, el programa no hace nada y pasa a la siguiente l\u00ednea de c\u00f3digo. Sin embargo, si es falso, el programa se detiene y arroja un error. Las aserciones son importantes al momento de realizar tests unitarios o asegurar que un resultado siempre sea el mismo. # definir funcion def suma ( x , y ): return x + y # ejemplo correcto assert suma ( 1 , 1 ) == 2 , \"ejemplo invalido\" # ejemplo incorrecto assert suma ( 1 , 1 ) == 3 , \"ejemplo invalido\" Estructura de datos Listas Se crea una lista colocando todos los elementos (elementos) dentro de un corchete [] separados por comas. # lista vacia lista = [] # lista de enteros lista = [ 1 , 2 , 3 ] # lista mixta lista = [ 1 , \"hola\" , 3.4 ] Tambi\u00e9n, se pueden acceder a cada uno de sus eleentos numeros = [ \"uno\" , \"dos\" , \"tres\" , \"cuatro\" ] # acceder al primer elemento print ( numeros [ 0 ]) # acceder al cuarto elemento print ( numeros [ 1 : 3 ]) Tuplas La tupla es similar a una lista, excepto que no puede cambiar los elementos de una tupla una vez que est\u00e1 definida. Mientras que en una lista, los elementos se pueden modificar. numeros = ( \"uno\" , \"dos\" , \"tres\" , \"cuatro\" ) print ( numeros ) numeros = ( \"uno\" , \"dos\" , \"tres\" , \"cuatro\" ) print ( numeros [ 1 ]) #Output: dos print ( numeros [ 3 ]) #Output: cuatro print ( numeros [ - 1 ]) # Output: cuatro Conjuntos Un conjunto es una colecci\u00f3n desordenada de elementos donde cada elemento es \u00fanico (sin duplicados). # conjunto de enteros conjunto = { 1 , 2 , 3 } print ( conjunto ) # conjunto mixto conjunto = { 1.0 , \"hola\" , ( 1 , 2 , 3 )} print ( conjunto ) # conjunto de enteros conjunto = { 1 , 2 , 3 } conjunto . add ( 4 ) print ( conjunto ) # Output: {1, 2, 3, 4} conjunto . add ( 2 ) print ( conjunto ) # Output: {1, 2, 3, 4} conjunto . update ([ 3 , 4 , 5 ]) print ( conjunto ) # Output: {1, 2, 3, 4, 5} conjunto . remove ( 4 ) print ( conjunto ) # Output: {1, 2, 3, 5} Diccionarios Los diccionarios en Python son un tipo de estructuras de datos que permite guardar un conjunto no ordenado de pares clave-valor, siendo las claves \u00fanicas dentro de un mismo diccionario (es decir que no pueden existir dos elementos con una misma clave) # diccionario vacio dct = {} # diccionario de enteros dct = { 1 : 'apple' , 2 : 'ball' } # diccionario dde llaves mixtas dct = { 'name' : 'John' , 1 : [ 2 , 4 , 3 ]} dct = { 'nombre' : 'Jack' , 'edad' : 26 , 'salario' : 4534.2 } print ( dct [ 'edad' ]) # Output: 26 dct = { 'nombre' : 'Jack' , 'edad' : 26 } # cambiar edad dct [ 'edad' ] = 36 print ( dct ) # Output: {'name': 'Jack', 'age': 36} # adherir llave salario dct [ 'salario' ] = 4342.4 print ( dct ) # Output: {'name': 'Jack', 'age': 36, 'salary': 4342.4} # borrar llave edad del dct [ 'edad' ] print ( dct ) # Output: {'name': 'Jack', 'salary': 4342.4} # borrar diccionario del dct Python range() range() devuelve una secuencia inmutable de n\u00fameros entre el entero de inicio dado al entero de parada. print ( range ( 1 , 10 )) # Output: range(1, 10) El resultado es iterable y puede convertirlo en list, tuple, set, etc. Por ejemplo: numeros = range ( 1 , 6 ) print ( list ( numeros )) # Output: [1, 2, 3, 4, 5] print ( tuple ( numeros )) # Output: (1, 2, 3, 4, 5) print ( set ( numeros )) # Output: {1, 2, 3, 4, 5} # Output: {1: 99, 2: 99, 3: 99, 4: 99, 5: 99} print ( dict . fromkeys ( numeros , 99 )) Hemos omitido el par\u00e1metro de step opcional para range() en los ejemplos anteriores. Cuando se omite, el paso predeterminado es 1. Probemos algunos ejemplos con el par\u00e1metro de paso. numero1 = range ( 1 , 6 , 1 ) print ( list ( numero1 )) # Output: [1, 2, 3, 4, 5] numero2 = range ( 1 , 6 , 2 ) print ( list ( numero2 )) # Output: [1, 3, 5] numero3 = range ( 5 , 0 , - 1 ) print ( list ( numero3 )) # Output: [5, 4, 3, 2, 1] Control de Flujo if, elif,..., else La instrucci\u00f3n if ... else se usa si desea realizar una acci\u00f3n diferente (ejecutar un c\u00f3digo diferente) en diferentes condiciones. Por ejemplo: num = - 1 if num > 0 : print ( \"numero positivo\" ) elif num == 0 : print ( \"cero\" ) else : print ( \"numero negativo\" ) # Output: numero negativo Puede haber cero o m\u00e1s partes elif, y la parte else es opcional. La mayor\u00eda de los lenguajes de programaci\u00f3n usan {} para especificar el bloque de c\u00f3digo. Python usa sangr\u00eda. Un bloque de c\u00f3digo comienza con sangr\u00eda y termina con la primera l\u00ednea sin sangr\u00eda. La cantidad de sangr\u00eda depende de usted, pero debe ser consistente a lo largo de ese bloque. En general, se utilizan cuatro espacios en blanco para la sangr\u00eda y se prefieren a las pesta\u00f1as. Probemos con otro ejemplo: if False : print ( \"Hola\" ) print ( \"mundo\" ) print ( \"!!!\" ) # Output: !!! While Loop Al igual que la mayor\u00eda de los lenguajes de programaci\u00f3n, el loop se usa para iterar sobre un bloque de c\u00f3digo siempre que la expresi\u00f3n de prueba (condici\u00f3n) sea verdadera. Aqu\u00ed hay un ejemplo para encontrar la suma de n\u00fameros naturales: n = 100 # inicializar contador sum = 0 i = 1 while i <= n : sum = sum + i i = i + 1 # actualizar contador print ( \"La suma es\" , sum ) # Output: La suma es For Loop En Python, for loop se usa para iterar sobre una secuencia (lista, tupla, cadena) u otros objetos iterables. Iterar sobre una secuencia se llama transversal. Aqu\u00ed hay un ejemplo para encontrar la suma de todos los n\u00fameros almacenados en una lista. numbers = [ 6 , 5 , 3 , 8 , 4 , 2 ] sum = 0 # iterar sobre la lista for val in numbers : sum = sum + val print ( \"La suma es\" , sum ) # Output: La suma es 28 Break La declaraci\u00f3n break termina el ciclo que lo contiene. El control del programa fluye a la declaraci\u00f3n inmediatamente despu\u00e9s del cuerpo del bucle. Por ejemplo: for val in \"string\" : if val == \"r\" : break print ( val ) print ( \"Fin\" ) Continue La instrucci\u00f3n continue se usa para omitir el resto del c\u00f3digo dentro de un bucle solo para la iteraci\u00f3n actual. El bucle no termina pero contin\u00faa con la siguiente iteraci\u00f3n. Por ejemplo: for val in \"string\" : if val == \"r\" : continue print ( val ) print ( \"Fin\" ) Pass Supongamos que tiene un bucle o una funci\u00f3n que a\u00fan no est\u00e1 implementada, pero desea implementarla en el futuro. No pueden tener un cuerpo vac\u00edo. El int\u00e9rprete se quejar\u00eda. Por lo tanto, utiliza la instrucci\u00f3n pass para construir un cuerpo que no hace nada. sequence = { 'p' , 'a' , 's' , 's' } for val in sequence : pass Funciones Una funci\u00f3n es un grupo de declaraciones relacionadas que realizan una tarea espec\u00edfica. Utiliza la palabra clave def para crear funciones en Python. def imprimir_lineas (): print ( \"linea 1\" ) print ( \"linea 2\" ) # llamar funcion imprimir_lineas () Una funci\u00f3n puede aceptar argumentos. def sumar ( a , b ): sum = a + b return sum resultado = sumar ( 4 , 5 ) print ( resultado ) # Output: 9 Recursion Una funci\u00f3n que se llama a s\u00ed misma se conoce como funci\u00f3n recursiva y este proceso se llama recursividad. Cada funci\u00f3n recursiva debe tener una condici\u00f3n base que detenga la recursividad o, de lo contrario, la funci\u00f3n se llama a s\u00ed misma infinitamente. # funcion factorial (recursivo) def factorial ( x ): if x == 1 : return 1 else : return ( x * factorial ( x - 1 )) num = 6 print ( \"El factorial de \" , num , \"es\" , factorial ( num )) # Output: El factorial de 6 es 720 Lambda En Python, puede definir funciones sin nombre. Estas funciones se denominan lambda o funci\u00f3n an\u00f3nima. Para crear una funci\u00f3n lambda , se utiliza la palabra clave lambda . cuadrado = lambda x : x ** 2 print ( cuadrado ( 5 )) # Output: 25 M\u00f3dulos Los m\u00f3dulos se refieren a un archivo que contiene declaraciones y definiciones de Python. Un archivo que contiene c\u00f3digo Python, por ejemplo: modulo_01.py , se llama m\u00f3dulo y su nombre de m\u00f3dulo ser\u00eda un ejemplo. Perm\u00edtanos crearlo y guardarlo como modulo_01.py. %% writefile modulo_01 . py def sumar ( a , b ): return a + b Para usar este m\u00f3dulo, usamos la palabra clave import . # importar modulo import modulo_01 # acceder a las funciones del modulo modulo_01 . sumar ( 4 , 5.5 ) Tambi\u00e9n se pueden exportar m\u00f3dulos nativos de python. import math resultado = math . log2 ( 5 ) # retorna logaritmo base 2 print ( resultado ) # Output: 2.321928094887362 Python tiene una tonelada de m\u00f3dulos est\u00e1ndar f\u00e1cilmente disponibles para su uso. Por ejemplo: from math import pi print ( \"El valor de pi es\" , pi ) # Output: The value of pi is 3.141592653589793 Programaci\u00f3n orientada a objetos (OOP) Todo en Python es un objeto que incluye enteros, flotantes, funciones, clases y Ninguno. No nos centremos en por qu\u00e9 todo en Python es un objeto. Para eso, visite esta p\u00e1gina. M\u00e1s bien, esta secci\u00f3n se enfoca en crear sus propias clases y objetos. Clase y objetos El objeto es simplemente una colecci\u00f3n de datos (variables) y m\u00e9todos (funciones) que act\u00faan sobre los datos. Y, la clase es un modelo para el objeto. Tan pronto como defina una clase, se crea un nuevo objeto de clase con el mismo nombre. Este objeto de clase nos permite acceder a los diferentes atributos, as\u00ed como crear instancias de nuevos objetos de esa clase. class Mi_clase : \"Esta es mi clase\" a = 10 def func ( self ): print ( 'hola' ) # Output: 10 print ( Mi_clase . a ) # Output: <function 0x0000000003079bf8=\"\" at=\"\" myclass.func=\"\"> print ( Mi_clase . func ) # Output: 'Esta es mi clase' print ( Mi_clase . __doc__ ) Es posible que haya notado el par\u00e1metro self en la definici\u00f3n de la funci\u00f3n dentro de la clase, pero llamamos al m\u00e9todo simplemente como ob.func() sin ning\u00fan argumento. A\u00fan funcion\u00f3. Esto se debe a que, cada vez que un objeto llama a su m\u00e9todo, el objeto mismo se pasa como primer argumento. Entonces, ob.func() se traduce en Mi_clase.func(ob) . Creando objetos Tambi\u00e9n puede crear objetos de la clase usted mismo. class Mi_clase : \"Esta es mi clase\" a = 10 def func ( self ): print ( 'hola' ) obj1 = Mi_clase () print ( obj1 . a ) # Output: 10 obj2 = Mi_clase () print ( obj1 . a + 5 ) # Output: 15 Constructores de Python En Python, un m\u00e9todo con el nombre init () es un constructor. Este m\u00e9todo se llama autom\u00e1ticamente cuando se instancia un objeto. class NumerosComplejos : def __init__ ( self , r = 0 , i = 0 ): # constructor self . real = r self . imag = i def obtener_datos ( self ): print ( \" {0} + {1} j\" . format ( self . real , self . imag )) c1 = NumerosComplejos ( 2 , 3 ) # crear el objeto NumerosComplejos c1 . obtener_datos () # Output: 2+3j c2 = NumerosComplejos () # crear un nuevo objeto NumerosComplejos c2 . obtener_datos () # Output: 0+0j Herencia de Python La herencia se refiere a definir una nueva clase con poca o ninguna modificaci\u00f3n a una clase existente. Tomemos un ejemplo: class Mamifero : def caracteristicas ( self ): print ( 'Mam\u00edfero es un animal de sangre caliente' ) Derivemos una nueva clase Perro de esta clase Mamifero . class Mamifero : def caracteristicas_mamifero ( self ): print ( 'Mam\u00edfero es un animal de sangre caliente' ) class Perro ( Mamifero ): def caracteristicas_perro ( self ): print ( 'El perro ladra' ) d = Perro () d . caracteristicas_perro () d . caracteristicas_mamifero () Decoradores Python tiene una caracter\u00edstica interesante llamada decoradores para agregar funcionalidad a un c\u00f3digo existente. Esto tambi\u00e9n se llama metaprogramaci\u00f3n ya que una parte del programa intenta modificar otra parte del programa en tiempo de compilaci\u00f3n. def debug ( f ): def nueva_funcion ( a , b ): print ( \"La funcion Sumar es llamada!!!\" ) return f ( a , b ) return nueva_funcion @debug # decorador def Sumar ( a , b ): return a + b print ( Sumar ( 7 , 5 )) Referencia Introducci\u00f3n al lenguaje Python Introducci\u00f3n \u2014 Tutorial de Python 3.6.3 documentation","title":"Python"},{"location":"lectures/basic_tools/lecture_012_python/#python","text":"","title":"Python"},{"location":"lectures/basic_tools/lecture_012_python/#nomenclatura-basica","text":"","title":"Nomenclatura b\u00e1sica"},{"location":"lectures/basic_tools/lecture_012_python/#hola-mundo","text":"Escribamos nuestro primer programa de Python, \"\u00a1Hola, mundo!\". Es un programa simple que imprime Hello World! en el dispositivo de salida est\u00e1ndar (pantalla). # imprimir \"Hola Mundo!\" print ( \"Hola Mundo!\" );","title":"Hola mundo!"},{"location":"lectures/basic_tools/lecture_012_python/#variables","text":"Una variable es una ubicaci\u00f3n con nombre utilizada para almacenar datos en la memoria. Aqu\u00ed hay un ejemplo: # crear e imprimir variables a = 5 print ( \"a =\" , 5 ) a = \"cinco\" print ( \"a =\" , a )","title":"Variables"},{"location":"lectures/basic_tools/lecture_012_python/#operadores-basico","text":"Los operadores son s\u00edmbolos especiales que realizan operaciones en operandos (variables y valores). Hablemos de operadores aritm\u00e9ticos y de asignaci\u00f3n en esta parte. # operaciones basicas x = 14 y = 4 # suma print ( 'x + y =' , x + y ) # Output: x + y = 18 # resta print ( 'x - y =' , x - y ) # Output: x - y = 10 # multiplicacion print ( 'x * y =' , x * y ) # Output: x * y = 56 # division print ( 'x / y =' , x / y ) # Output: x / y = 3.5 # cuociente print ( 'x // y =' , x // y ) # Output: x // y = 3 # resto print ( 'x % y =' , x % y ) # Output: x % y = 2","title":"Operadores b\u00e1sico"},{"location":"lectures/basic_tools/lecture_012_python/#operadores-de-asignacion","text":"Los operadores de asignaci\u00f3n se utilizan para asignar valores a las variables. Ya has visto el uso de = operator. Probemos algunos operadores de asignaci\u00f3n m\u00e1s. # operadores de asignacion x = 5 # x += 5 ----> x = x + 5 x += 5 print ( x ) # Output: 10 # x /= 5 ----> x = x / 5 x /= 5 print ( x ) # Output: 2.0","title":"Operadores de asignaci\u00f3n"},{"location":"lectures/basic_tools/lecture_012_python/#inputs-por-el-usuario","text":"En Python, puede usar la funci\u00f3n input() para tomar la entrada del usuario. Por ejemplo: # inputs por el usuario inputString = input ( 'Escriba una oracion:' ) print ( 'Su oracion es:' , inputString )","title":"Inputs por el usuario"},{"location":"lectures/basic_tools/lecture_012_python/#conversion-de-tipo","text":"The process of converting the value of one data type (integer, string, float, etc.) to another is called type conversion. Python has two types of type conversion.","title":"Conversi\u00f3n de tipo"},{"location":"lectures/basic_tools/lecture_012_python/#implicita","text":"# correcto num_int = 123 # integer type num_flo = 1.23 # float type num_new = num_int + num_flo print ( \"Valor de num_new:\" , num_new ) print ( \"tipo de datos de num_new:\" , type ( num_new )) # incorrecto num_int = 123 # int type num_str = \"456\" # str type print ( num_int + num_str )","title":"Impl\u00edcita"},{"location":"lectures/basic_tools/lecture_012_python/#explicito","text":"num_int = 123 # int type num_str = \"456\" # str type # explicitly converted to int type num_str = int ( num_str ) print ( num_int + num_str )","title":"Expl\u00edcito"},{"location":"lectures/basic_tools/lecture_012_python/#python-tipos-numericos","text":"Python admite enteros, n\u00fameros de coma flotante y n\u00fameros complejos. Se definen como int, float y clase compleja en Python. Adem\u00e1s de eso, los booleanos: verdadero y falso son un subtipo de enteros. print ( type ( 5 )) # Output: <class> print ( type ( 5.0 )) # <class> c = 5 + 3 j print ( type ( c ))","title":"Python tipos num\u00e9ricos"},{"location":"lectures/basic_tools/lecture_012_python/#manejo-de-excepciones-de-python","text":"Los errores que se producen en tiempo de ejecuci\u00f3n se denominan excepciones. Ocurren, por ejemplo, cuando un archivo que intentamos abrir no existe FileNotFoundError , dividiendo un n\u00famero por cero ZeroDivisionError , etc. Si no se manejan las excepciones, se escupe un mensaje de error y nuestro programa se detiene repentinamente e inesperadamente. En Python, las excepciones se pueden manejar usando la declaraci\u00f3n try. Cuando se detectan excepciones, depende de usted qu\u00e9 operador realizar. # importar modulo sys import sys lista_random = [ 'a' , 0 , 2 ] for elemento in lista_random : try : print ( \"La entrada es \" , elemento ) r = 1 / int ( elemento ) break except : print ( \"Oops! ocurrio un\" , sys . exc_info ()[ 0 ]) print ( \"Siguiente entrada.\" ) print () print ( \"El reciproco de\" , elemento , \"es\" , r ) Algunas Excepciones Comunes NameError : Esta excepci\u00f3n es levantada cuando el programa no puede encontrar un nombre local o global. El nombre que podr\u00eda no ser encontrado est\u00e1 incluido en el mensaje de error. TypeError : Esta excepci\u00f3n es levantada cuando una funci\u00f3n se le pasa un objeto del tipo inapropiado como su argumento. M\u00e1s detalles sobre el tipo incorrecto son proporcionados en el mensaje de error. ValueError : Esta excepci\u00f3n ocurre cuando un argumento de funci\u00f3n tiene el tipo correcto pero un valor inapropiado. NotImplementedError : Esta excepci\u00f3n es levantada cuando se supone que un objeto apoye una operaci\u00f3n pero no ha sido implementado a\u00fan. No deber\u00edas usar este error cuando la funci\u00f3n dada no deba apoyar al tipo de argumento de entrada. En esas situaciones, levantar una excepci\u00f3n TypeError es m\u00e1s apropiado. ZeroDivisionError : Esta excepci\u00f3n es levantada cuando proporcionas el segundo argumento para una operaci\u00f3n de divisi\u00f3n o m\u00f3dulo como cero. FileNotFoundError : Esta excepci\u00f3n es levantada cuando el archivo o diccionario que el programa solicit\u00f3 no existe.","title":"Manejo de excepciones de Python"},{"location":"lectures/basic_tools/lecture_012_python/#aserciones-en-python","text":"Las aserciones son expresiones booleanas que comprueban si las condiciones devuelven verdaderas o no. Si es cierto, el programa no hace nada y pasa a la siguiente l\u00ednea de c\u00f3digo. Sin embargo, si es falso, el programa se detiene y arroja un error. Las aserciones son importantes al momento de realizar tests unitarios o asegurar que un resultado siempre sea el mismo. # definir funcion def suma ( x , y ): return x + y # ejemplo correcto assert suma ( 1 , 1 ) == 2 , \"ejemplo invalido\" # ejemplo incorrecto assert suma ( 1 , 1 ) == 3 , \"ejemplo invalido\"","title":"Aserciones en python"},{"location":"lectures/basic_tools/lecture_012_python/#estructura-de-datos","text":"","title":"Estructura de datos"},{"location":"lectures/basic_tools/lecture_012_python/#listas","text":"Se crea una lista colocando todos los elementos (elementos) dentro de un corchete [] separados por comas. # lista vacia lista = [] # lista de enteros lista = [ 1 , 2 , 3 ] # lista mixta lista = [ 1 , \"hola\" , 3.4 ] Tambi\u00e9n, se pueden acceder a cada uno de sus eleentos numeros = [ \"uno\" , \"dos\" , \"tres\" , \"cuatro\" ] # acceder al primer elemento print ( numeros [ 0 ]) # acceder al cuarto elemento print ( numeros [ 1 : 3 ])","title":"Listas"},{"location":"lectures/basic_tools/lecture_012_python/#tuplas","text":"La tupla es similar a una lista, excepto que no puede cambiar los elementos de una tupla una vez que est\u00e1 definida. Mientras que en una lista, los elementos se pueden modificar. numeros = ( \"uno\" , \"dos\" , \"tres\" , \"cuatro\" ) print ( numeros ) numeros = ( \"uno\" , \"dos\" , \"tres\" , \"cuatro\" ) print ( numeros [ 1 ]) #Output: dos print ( numeros [ 3 ]) #Output: cuatro print ( numeros [ - 1 ]) # Output: cuatro","title":"Tuplas"},{"location":"lectures/basic_tools/lecture_012_python/#conjuntos","text":"Un conjunto es una colecci\u00f3n desordenada de elementos donde cada elemento es \u00fanico (sin duplicados). # conjunto de enteros conjunto = { 1 , 2 , 3 } print ( conjunto ) # conjunto mixto conjunto = { 1.0 , \"hola\" , ( 1 , 2 , 3 )} print ( conjunto ) # conjunto de enteros conjunto = { 1 , 2 , 3 } conjunto . add ( 4 ) print ( conjunto ) # Output: {1, 2, 3, 4} conjunto . add ( 2 ) print ( conjunto ) # Output: {1, 2, 3, 4} conjunto . update ([ 3 , 4 , 5 ]) print ( conjunto ) # Output: {1, 2, 3, 4, 5} conjunto . remove ( 4 ) print ( conjunto ) # Output: {1, 2, 3, 5}","title":"Conjuntos"},{"location":"lectures/basic_tools/lecture_012_python/#diccionarios","text":"Los diccionarios en Python son un tipo de estructuras de datos que permite guardar un conjunto no ordenado de pares clave-valor, siendo las claves \u00fanicas dentro de un mismo diccionario (es decir que no pueden existir dos elementos con una misma clave) # diccionario vacio dct = {} # diccionario de enteros dct = { 1 : 'apple' , 2 : 'ball' } # diccionario dde llaves mixtas dct = { 'name' : 'John' , 1 : [ 2 , 4 , 3 ]} dct = { 'nombre' : 'Jack' , 'edad' : 26 , 'salario' : 4534.2 } print ( dct [ 'edad' ]) # Output: 26 dct = { 'nombre' : 'Jack' , 'edad' : 26 } # cambiar edad dct [ 'edad' ] = 36 print ( dct ) # Output: {'name': 'Jack', 'age': 36} # adherir llave salario dct [ 'salario' ] = 4342.4 print ( dct ) # Output: {'name': 'Jack', 'age': 36, 'salary': 4342.4} # borrar llave edad del dct [ 'edad' ] print ( dct ) # Output: {'name': 'Jack', 'salary': 4342.4} # borrar diccionario del dct","title":"Diccionarios"},{"location":"lectures/basic_tools/lecture_012_python/#python-range","text":"range() devuelve una secuencia inmutable de n\u00fameros entre el entero de inicio dado al entero de parada. print ( range ( 1 , 10 )) # Output: range(1, 10) El resultado es iterable y puede convertirlo en list, tuple, set, etc. Por ejemplo: numeros = range ( 1 , 6 ) print ( list ( numeros )) # Output: [1, 2, 3, 4, 5] print ( tuple ( numeros )) # Output: (1, 2, 3, 4, 5) print ( set ( numeros )) # Output: {1, 2, 3, 4, 5} # Output: {1: 99, 2: 99, 3: 99, 4: 99, 5: 99} print ( dict . fromkeys ( numeros , 99 )) Hemos omitido el par\u00e1metro de step opcional para range() en los ejemplos anteriores. Cuando se omite, el paso predeterminado es 1. Probemos algunos ejemplos con el par\u00e1metro de paso. numero1 = range ( 1 , 6 , 1 ) print ( list ( numero1 )) # Output: [1, 2, 3, 4, 5] numero2 = range ( 1 , 6 , 2 ) print ( list ( numero2 )) # Output: [1, 3, 5] numero3 = range ( 5 , 0 , - 1 ) print ( list ( numero3 )) # Output: [5, 4, 3, 2, 1]","title":"Python range()"},{"location":"lectures/basic_tools/lecture_012_python/#control-de-flujo","text":"","title":"Control de Flujo"},{"location":"lectures/basic_tools/lecture_012_python/#if-elif-else","text":"La instrucci\u00f3n if ... else se usa si desea realizar una acci\u00f3n diferente (ejecutar un c\u00f3digo diferente) en diferentes condiciones. Por ejemplo: num = - 1 if num > 0 : print ( \"numero positivo\" ) elif num == 0 : print ( \"cero\" ) else : print ( \"numero negativo\" ) # Output: numero negativo Puede haber cero o m\u00e1s partes elif, y la parte else es opcional. La mayor\u00eda de los lenguajes de programaci\u00f3n usan {} para especificar el bloque de c\u00f3digo. Python usa sangr\u00eda. Un bloque de c\u00f3digo comienza con sangr\u00eda y termina con la primera l\u00ednea sin sangr\u00eda. La cantidad de sangr\u00eda depende de usted, pero debe ser consistente a lo largo de ese bloque. En general, se utilizan cuatro espacios en blanco para la sangr\u00eda y se prefieren a las pesta\u00f1as. Probemos con otro ejemplo: if False : print ( \"Hola\" ) print ( \"mundo\" ) print ( \"!!!\" ) # Output: !!!","title":"if, elif,..., else"},{"location":"lectures/basic_tools/lecture_012_python/#while-loop","text":"Al igual que la mayor\u00eda de los lenguajes de programaci\u00f3n, el loop se usa para iterar sobre un bloque de c\u00f3digo siempre que la expresi\u00f3n de prueba (condici\u00f3n) sea verdadera. Aqu\u00ed hay un ejemplo para encontrar la suma de n\u00fameros naturales: n = 100 # inicializar contador sum = 0 i = 1 while i <= n : sum = sum + i i = i + 1 # actualizar contador print ( \"La suma es\" , sum ) # Output: La suma es","title":"While Loop"},{"location":"lectures/basic_tools/lecture_012_python/#for-loop","text":"En Python, for loop se usa para iterar sobre una secuencia (lista, tupla, cadena) u otros objetos iterables. Iterar sobre una secuencia se llama transversal. Aqu\u00ed hay un ejemplo para encontrar la suma de todos los n\u00fameros almacenados en una lista. numbers = [ 6 , 5 , 3 , 8 , 4 , 2 ] sum = 0 # iterar sobre la lista for val in numbers : sum = sum + val print ( \"La suma es\" , sum ) # Output: La suma es 28","title":"For Loop"},{"location":"lectures/basic_tools/lecture_012_python/#break","text":"La declaraci\u00f3n break termina el ciclo que lo contiene. El control del programa fluye a la declaraci\u00f3n inmediatamente despu\u00e9s del cuerpo del bucle. Por ejemplo: for val in \"string\" : if val == \"r\" : break print ( val ) print ( \"Fin\" )","title":"Break"},{"location":"lectures/basic_tools/lecture_012_python/#continue","text":"La instrucci\u00f3n continue se usa para omitir el resto del c\u00f3digo dentro de un bucle solo para la iteraci\u00f3n actual. El bucle no termina pero contin\u00faa con la siguiente iteraci\u00f3n. Por ejemplo: for val in \"string\" : if val == \"r\" : continue print ( val ) print ( \"Fin\" )","title":"Continue"},{"location":"lectures/basic_tools/lecture_012_python/#pass","text":"Supongamos que tiene un bucle o una funci\u00f3n que a\u00fan no est\u00e1 implementada, pero desea implementarla en el futuro. No pueden tener un cuerpo vac\u00edo. El int\u00e9rprete se quejar\u00eda. Por lo tanto, utiliza la instrucci\u00f3n pass para construir un cuerpo que no hace nada. sequence = { 'p' , 'a' , 's' , 's' } for val in sequence : pass","title":"Pass"},{"location":"lectures/basic_tools/lecture_012_python/#funciones","text":"Una funci\u00f3n es un grupo de declaraciones relacionadas que realizan una tarea espec\u00edfica. Utiliza la palabra clave def para crear funciones en Python. def imprimir_lineas (): print ( \"linea 1\" ) print ( \"linea 2\" ) # llamar funcion imprimir_lineas () Una funci\u00f3n puede aceptar argumentos. def sumar ( a , b ): sum = a + b return sum resultado = sumar ( 4 , 5 ) print ( resultado ) # Output: 9","title":"Funciones"},{"location":"lectures/basic_tools/lecture_012_python/#recursion","text":"Una funci\u00f3n que se llama a s\u00ed misma se conoce como funci\u00f3n recursiva y este proceso se llama recursividad. Cada funci\u00f3n recursiva debe tener una condici\u00f3n base que detenga la recursividad o, de lo contrario, la funci\u00f3n se llama a s\u00ed misma infinitamente. # funcion factorial (recursivo) def factorial ( x ): if x == 1 : return 1 else : return ( x * factorial ( x - 1 )) num = 6 print ( \"El factorial de \" , num , \"es\" , factorial ( num )) # Output: El factorial de 6 es 720","title":"Recursion"},{"location":"lectures/basic_tools/lecture_012_python/#lambda","text":"En Python, puede definir funciones sin nombre. Estas funciones se denominan lambda o funci\u00f3n an\u00f3nima. Para crear una funci\u00f3n lambda , se utiliza la palabra clave lambda . cuadrado = lambda x : x ** 2 print ( cuadrado ( 5 )) # Output: 25","title":"Lambda"},{"location":"lectures/basic_tools/lecture_012_python/#modulos","text":"Los m\u00f3dulos se refieren a un archivo que contiene declaraciones y definiciones de Python. Un archivo que contiene c\u00f3digo Python, por ejemplo: modulo_01.py , se llama m\u00f3dulo y su nombre de m\u00f3dulo ser\u00eda un ejemplo. Perm\u00edtanos crearlo y guardarlo como modulo_01.py. %% writefile modulo_01 . py def sumar ( a , b ): return a + b Para usar este m\u00f3dulo, usamos la palabra clave import . # importar modulo import modulo_01 # acceder a las funciones del modulo modulo_01 . sumar ( 4 , 5.5 ) Tambi\u00e9n se pueden exportar m\u00f3dulos nativos de python. import math resultado = math . log2 ( 5 ) # retorna logaritmo base 2 print ( resultado ) # Output: 2.321928094887362 Python tiene una tonelada de m\u00f3dulos est\u00e1ndar f\u00e1cilmente disponibles para su uso. Por ejemplo: from math import pi print ( \"El valor de pi es\" , pi ) # Output: The value of pi is 3.141592653589793","title":"M\u00f3dulos"},{"location":"lectures/basic_tools/lecture_012_python/#programacion-orientada-a-objetos-oop","text":"Todo en Python es un objeto que incluye enteros, flotantes, funciones, clases y Ninguno. No nos centremos en por qu\u00e9 todo en Python es un objeto. Para eso, visite esta p\u00e1gina. M\u00e1s bien, esta secci\u00f3n se enfoca en crear sus propias clases y objetos.","title":"Programaci\u00f3n orientada a objetos (OOP)"},{"location":"lectures/basic_tools/lecture_012_python/#clase-y-objetos","text":"El objeto es simplemente una colecci\u00f3n de datos (variables) y m\u00e9todos (funciones) que act\u00faan sobre los datos. Y, la clase es un modelo para el objeto. Tan pronto como defina una clase, se crea un nuevo objeto de clase con el mismo nombre. Este objeto de clase nos permite acceder a los diferentes atributos, as\u00ed como crear instancias de nuevos objetos de esa clase. class Mi_clase : \"Esta es mi clase\" a = 10 def func ( self ): print ( 'hola' ) # Output: 10 print ( Mi_clase . a ) # Output: <function 0x0000000003079bf8=\"\" at=\"\" myclass.func=\"\"> print ( Mi_clase . func ) # Output: 'Esta es mi clase' print ( Mi_clase . __doc__ ) Es posible que haya notado el par\u00e1metro self en la definici\u00f3n de la funci\u00f3n dentro de la clase, pero llamamos al m\u00e9todo simplemente como ob.func() sin ning\u00fan argumento. A\u00fan funcion\u00f3. Esto se debe a que, cada vez que un objeto llama a su m\u00e9todo, el objeto mismo se pasa como primer argumento. Entonces, ob.func() se traduce en Mi_clase.func(ob) .","title":"Clase y objetos"},{"location":"lectures/basic_tools/lecture_012_python/#creando-objetos","text":"Tambi\u00e9n puede crear objetos de la clase usted mismo. class Mi_clase : \"Esta es mi clase\" a = 10 def func ( self ): print ( 'hola' ) obj1 = Mi_clase () print ( obj1 . a ) # Output: 10 obj2 = Mi_clase () print ( obj1 . a + 5 ) # Output: 15","title":"Creando objetos"},{"location":"lectures/basic_tools/lecture_012_python/#constructores-de-python","text":"En Python, un m\u00e9todo con el nombre init () es un constructor. Este m\u00e9todo se llama autom\u00e1ticamente cuando se instancia un objeto. class NumerosComplejos : def __init__ ( self , r = 0 , i = 0 ): # constructor self . real = r self . imag = i def obtener_datos ( self ): print ( \" {0} + {1} j\" . format ( self . real , self . imag )) c1 = NumerosComplejos ( 2 , 3 ) # crear el objeto NumerosComplejos c1 . obtener_datos () # Output: 2+3j c2 = NumerosComplejos () # crear un nuevo objeto NumerosComplejos c2 . obtener_datos () # Output: 0+0j","title":"Constructores de Python"},{"location":"lectures/basic_tools/lecture_012_python/#herencia-de-python","text":"La herencia se refiere a definir una nueva clase con poca o ninguna modificaci\u00f3n a una clase existente. Tomemos un ejemplo: class Mamifero : def caracteristicas ( self ): print ( 'Mam\u00edfero es un animal de sangre caliente' ) Derivemos una nueva clase Perro de esta clase Mamifero . class Mamifero : def caracteristicas_mamifero ( self ): print ( 'Mam\u00edfero es un animal de sangre caliente' ) class Perro ( Mamifero ): def caracteristicas_perro ( self ): print ( 'El perro ladra' ) d = Perro () d . caracteristicas_perro () d . caracteristicas_mamifero ()","title":"Herencia de Python"},{"location":"lectures/basic_tools/lecture_012_python/#decoradores","text":"Python tiene una caracter\u00edstica interesante llamada decoradores para agregar funcionalidad a un c\u00f3digo existente. Esto tambi\u00e9n se llama metaprogramaci\u00f3n ya que una parte del programa intenta modificar otra parte del programa en tiempo de compilaci\u00f3n. def debug ( f ): def nueva_funcion ( a , b ): print ( \"La funcion Sumar es llamada!!!\" ) return f ( a , b ) return nueva_funcion @debug # decorador def Sumar ( a , b ): return a + b print ( Sumar ( 7 , 5 ))","title":"Decoradores"},{"location":"lectures/basic_tools/lecture_012_python/#referencia","text":"Introducci\u00f3n al lenguaje Python Introducci\u00f3n \u2014 Tutorial de Python 3.6.3 documentation","title":"Referencia"},{"location":"lectures/basic_tools/lecture_013_ide/","text":"IDE's Introducci\u00f3n Un IDE (Integrated Development Environment) es un software que ayuda a los desarrolladores a escribir c\u00f3digos para desarrollar aplicaciones. Tiene una interfaz f\u00e1cil de usar que consta de un editor y un compilador. Podemos escribir el c\u00f3digo en la ventana del editor y compilarlo usando el compilador. En consecuencia, podemos ejecutarlo para verificar la salida del programa en el terminal de salida. Un IDE facilita a los desarrolladores con muchas funcionalidades programar en varios idiomas. As\u00ed, se ha convertido en una de las herramientas imprescindibles para el desarrollo de diversas aplicaciones. Herramientas Text Editor Escribimos programas en la ventana del editor de texto. Aqu\u00ed podemos editar, depurar y comentar nuestros programas. Tambi\u00e9n proporciona funciones como el predictor de texto que ayuda a corregir errores. Project Editor Un proyecto consta de diferentes archivos para diversas funcionalidades. Almacenamos estos archivos esenciales de un proyecto de software en la ventana del Editor de proyectos. Output Terminal El terminal de salida en un IDE muestra el resultado del programa. Toolbar Una barra de herramientas es un conjunto de opciones que est\u00e1n vinculadas a funcionalidades espec\u00edficas como ver, ejecutar, debugging, etc. Ayuda a realizar varias operaciones en el programa que creamos. La necesidad de un IDE La velocidad y la eficiencia son los dos factores que afectan a todas las industrias. En esta era competitiva, se ha convertido en un desaf\u00edo crear software r\u00e1pido y escalable para los clientes. Aqu\u00ed es donde un IDE inteligente gana el juego. Un IDE nos ayuda con las siguientes caracter\u00edsticas: Autocompletar Esta funci\u00f3n nos ayuda a corregir errores de sintaxis de inmediato. Sugiere las variables, palabras clave, funciones, bibliotecas y paquetes correctos para usar al escribir el c\u00f3digo. Adem\u00e1s, el esquema de color de un IDE resulta ser un gran activo. Ayuda a comprender el flujo de un programa. Podemos distinguir f\u00e1cilmente entre variables y texto y entre funciones y clases, y as\u00ed comprender la l\u00f3gica del c\u00f3digo. Debugging El debugging es el paso m\u00e1s importante para crear un software exitoso. El debugging del c\u00f3digo implica probar y borrar todos los errores para que nuestro programa no se bloquee. Gesti\u00f3n de archivos Un proyecto consta de diferentes archivos con diferentes funcionalidades. Se convierte en una tarea necesaria colocar estos archivos en ubicaciones adecuadas para la ejecuci\u00f3n del programa. Un IDE hace que la ubicaci\u00f3n de todos los archivos de recursos de un proyecto sea m\u00e1s visible Tipos de IDE La creaci\u00f3n de aplicaciones utilizando diferentes lenguajes de programaci\u00f3n requiere varios tipos de IDE compatibles con los respectivos lenguajes de programaci\u00f3n. En esta secci\u00f3n, veremos los diferentes tipos de IDE utilizados para el desarrollo en varios lenguajes. Existen diferentes categor\u00edas de IDE, por ejemplo, usamos IDE para m\u00faltiples lenguajes de programaci\u00f3n, desarrollo m\u00f3vil y para lenguajes de programaci\u00f3n particulares. IDE para varios lenguajes Hay muchos IDE disponibles que ayudan a programar en diferentes lenguajes. Podemos utilizar un \u00fanico IDE para programar en varios lenguajes como C, C ++ o Java. Algunos de estos IDE se mencionan a continuaci\u00f3n: NetBeans Es un IDE de c\u00f3digo abierto que consta de varios paquetes y m\u00f3dulos \u00fatiles para el desarrollo. NetBeans admite varios idiomas como se indica a continuaci\u00f3n: C/C++ Java Python Ruby PHP JavaScript Groovy Eclipse Tambi\u00e9n es un software de c\u00f3digo abierto utilizado para varios marcos de desarrollo. Se utiliza principalmente para el desarrollo de aplicaciones con Java. Los idiomas admitidos por Eclipse son: Java Python C/C++ PHP Perl Ruby COBOL Haskell Fortran Aptana Es un IDE popular utilizado para el desarrollo de aplicaciones web. Los lenguajes de programaci\u00f3n admitidos por Aptana son: Python Ruby on Rails Ajax HTML CSS JavaScript IDE de desarrollo m\u00f3vil Hay varios IDE que se utilizan para el desarrollo de aplicaciones m\u00f3viles. Algunos de ellos se enumeran a continuaci\u00f3n: PhoneGap Android Studio IntelliJ IDEA Visual Studio Appcelerator IDE para lenguajes particulares Para programar exclusivamente en un idioma espec\u00edfico, hay varios IDE disponibles. Son los siguientes: Java: JCreator Python: IDLE C/C++: CodeLite R: RStudio Referencia What is an IDE?","title":"IDE"},{"location":"lectures/basic_tools/lecture_013_ide/#ides","text":"","title":"IDE's"},{"location":"lectures/basic_tools/lecture_013_ide/#introduccion","text":"Un IDE (Integrated Development Environment) es un software que ayuda a los desarrolladores a escribir c\u00f3digos para desarrollar aplicaciones. Tiene una interfaz f\u00e1cil de usar que consta de un editor y un compilador. Podemos escribir el c\u00f3digo en la ventana del editor y compilarlo usando el compilador. En consecuencia, podemos ejecutarlo para verificar la salida del programa en el terminal de salida. Un IDE facilita a los desarrolladores con muchas funcionalidades programar en varios idiomas. As\u00ed, se ha convertido en una de las herramientas imprescindibles para el desarrollo de diversas aplicaciones.","title":"Introducci\u00f3n"},{"location":"lectures/basic_tools/lecture_013_ide/#herramientas","text":"","title":"Herramientas"},{"location":"lectures/basic_tools/lecture_013_ide/#text-editor","text":"Escribimos programas en la ventana del editor de texto. Aqu\u00ed podemos editar, depurar y comentar nuestros programas. Tambi\u00e9n proporciona funciones como el predictor de texto que ayuda a corregir errores.","title":"Text Editor"},{"location":"lectures/basic_tools/lecture_013_ide/#project-editor","text":"Un proyecto consta de diferentes archivos para diversas funcionalidades. Almacenamos estos archivos esenciales de un proyecto de software en la ventana del Editor de proyectos.","title":"Project Editor"},{"location":"lectures/basic_tools/lecture_013_ide/#output-terminal","text":"El terminal de salida en un IDE muestra el resultado del programa.","title":"Output Terminal"},{"location":"lectures/basic_tools/lecture_013_ide/#toolbar","text":"Una barra de herramientas es un conjunto de opciones que est\u00e1n vinculadas a funcionalidades espec\u00edficas como ver, ejecutar, debugging, etc. Ayuda a realizar varias operaciones en el programa que creamos.","title":"Toolbar"},{"location":"lectures/basic_tools/lecture_013_ide/#la-necesidad-de-un-ide","text":"La velocidad y la eficiencia son los dos factores que afectan a todas las industrias. En esta era competitiva, se ha convertido en un desaf\u00edo crear software r\u00e1pido y escalable para los clientes. Aqu\u00ed es donde un IDE inteligente gana el juego. Un IDE nos ayuda con las siguientes caracter\u00edsticas:","title":"La necesidad de un IDE"},{"location":"lectures/basic_tools/lecture_013_ide/#autocompletar","text":"Esta funci\u00f3n nos ayuda a corregir errores de sintaxis de inmediato. Sugiere las variables, palabras clave, funciones, bibliotecas y paquetes correctos para usar al escribir el c\u00f3digo. Adem\u00e1s, el esquema de color de un IDE resulta ser un gran activo. Ayuda a comprender el flujo de un programa. Podemos distinguir f\u00e1cilmente entre variables y texto y entre funciones y clases, y as\u00ed comprender la l\u00f3gica del c\u00f3digo.","title":"Autocompletar"},{"location":"lectures/basic_tools/lecture_013_ide/#debugging","text":"El debugging es el paso m\u00e1s importante para crear un software exitoso. El debugging del c\u00f3digo implica probar y borrar todos los errores para que nuestro programa no se bloquee.","title":"Debugging"},{"location":"lectures/basic_tools/lecture_013_ide/#gestion-de-archivos","text":"Un proyecto consta de diferentes archivos con diferentes funcionalidades. Se convierte en una tarea necesaria colocar estos archivos en ubicaciones adecuadas para la ejecuci\u00f3n del programa. Un IDE hace que la ubicaci\u00f3n de todos los archivos de recursos de un proyecto sea m\u00e1s visible","title":"Gesti\u00f3n de archivos"},{"location":"lectures/basic_tools/lecture_013_ide/#tipos-de-ide","text":"La creaci\u00f3n de aplicaciones utilizando diferentes lenguajes de programaci\u00f3n requiere varios tipos de IDE compatibles con los respectivos lenguajes de programaci\u00f3n. En esta secci\u00f3n, veremos los diferentes tipos de IDE utilizados para el desarrollo en varios lenguajes. Existen diferentes categor\u00edas de IDE, por ejemplo, usamos IDE para m\u00faltiples lenguajes de programaci\u00f3n, desarrollo m\u00f3vil y para lenguajes de programaci\u00f3n particulares.","title":"Tipos de IDE"},{"location":"lectures/basic_tools/lecture_013_ide/#ide-para-varios-lenguajes","text":"Hay muchos IDE disponibles que ayudan a programar en diferentes lenguajes. Podemos utilizar un \u00fanico IDE para programar en varios lenguajes como C, C ++ o Java. Algunos de estos IDE se mencionan a continuaci\u00f3n:","title":"IDE para varios lenguajes"},{"location":"lectures/basic_tools/lecture_013_ide/#netbeans","text":"Es un IDE de c\u00f3digo abierto que consta de varios paquetes y m\u00f3dulos \u00fatiles para el desarrollo. NetBeans admite varios idiomas como se indica a continuaci\u00f3n: C/C++ Java Python Ruby PHP JavaScript Groovy","title":"NetBeans"},{"location":"lectures/basic_tools/lecture_013_ide/#eclipse","text":"Tambi\u00e9n es un software de c\u00f3digo abierto utilizado para varios marcos de desarrollo. Se utiliza principalmente para el desarrollo de aplicaciones con Java. Los idiomas admitidos por Eclipse son: Java Python C/C++ PHP Perl Ruby COBOL Haskell Fortran","title":"Eclipse"},{"location":"lectures/basic_tools/lecture_013_ide/#aptana","text":"Es un IDE popular utilizado para el desarrollo de aplicaciones web. Los lenguajes de programaci\u00f3n admitidos por Aptana son: Python Ruby on Rails Ajax HTML CSS JavaScript","title":"Aptana"},{"location":"lectures/basic_tools/lecture_013_ide/#ide-de-desarrollo-movil","text":"Hay varios IDE que se utilizan para el desarrollo de aplicaciones m\u00f3viles. Algunos de ellos se enumeran a continuaci\u00f3n: PhoneGap Android Studio IntelliJ IDEA Visual Studio Appcelerator","title":"IDE de desarrollo m\u00f3vil"},{"location":"lectures/basic_tools/lecture_013_ide/#ide-para-lenguajes-particulares","text":"Para programar exclusivamente en un idioma espec\u00edfico, hay varios IDE disponibles. Son los siguientes: Java: JCreator Python: IDLE C/C++: CodeLite R: RStudio","title":"IDE para lenguajes particulares"},{"location":"lectures/basic_tools/lecture_013_ide/#referencia","text":"What is an IDE?","title":"Referencia"},{"location":"lectures/basic_tools/lecture_014_jupyter/","text":"Jupyter Notebook Funciones B\u00e1sicas Jupyter Notebook es una herramienta de desarrollo para facilitar la programaci\u00f3n. Est\u00e1 orientada a la Computaci\u00f3n Cient\u00edfica y a la Ciencia de Datos. Es un entorno de computaci\u00f3n interactivo agn\u00f3stico, se puede ocupar en R, python o Julia. Jupyter notebook ofrece muchas herramientas que ser\u00e1n de gran utilidad a lo largo de este curso. Toolbox Jupyter notebook nos ofrece el siguiente toolbox: File : En \u00e9l, puede crear un nuevo cuaderno o abrir uno preexistente. Aqu\u00ed es tambi\u00e9n a donde ir\u00eda para cambiar el nombre de un Cuaderno. Creo que el elemento de men\u00fa m\u00e1s interesante es la opci\u00f3n Guardar y Checkpoint. Esto le permite crear puntos de control a los que puede retroceder si lo necesita. Edit : Aqu\u00ed puede cortar, copiar y pegar celdas. Aqu\u00ed tambi\u00e9n es donde ir\u00edas si quisieras eliminar, dividir o fusionar una celda. Puede reordenar celdas aqu\u00ed tambi\u00e9n. View : es \u00fatil para alternar la visibilidad del encabezado y la barra de herramientas. Tambi\u00e9n puede activar o desactivar los n\u00fameros de l\u00ednea dentro de las celdas. Aqu\u00ed tambi\u00e9n es donde ir\u00edas si quieres meterte con la barra de herramientas de la celda. Insert : es solo para insertar celdas encima o debajo de la celda seleccionada actualmente. Cell : le permite ejecutar una celda, un grupo de celdas o todas las celdas. Tambi\u00e9n puede ir aqu\u00ed para cambiar el tipo de celda, aunque personalmente considero que la barra de herramientas es m\u00e1s intuitiva para eso. Kernel : es para trabajar con el kernel que se ejecuta en segundo plano. Aqu\u00ed puede reiniciar el kernel, volver a conectarlo, apagarlo o incluso cambiar el kernel que est\u00e1 utilizando su computadora port\u00e1til. Widgets : es para guardar y borrar el estado del widget. Los widgets son b\u00e1sicamente widgets de JavaScript que puede agregar a sus celdas para crear contenido din\u00e1mico utilizando Python (u otro Kernel). Help : es donde debe aprender sobre los atajos de teclado del Notebook, un recorrido por la interfaz de usuario y mucho material de referencia. A medida que se avance en el cuso se entrar\u00e1 en detalle en cada una de estas herramientas. Ahora se ense\u00f1ar\u00e1 las virtudes de los notebooks en aspectos de presentaci\u00f3n tipo latex (markdown) y algunos atajos importantes que nos ayudar\u00e1n en el desarrollo de c\u00f3digos. Markdown Jupyter Notebook permite que escribamos texto formateado, es decir, texto con cursiva, negritas, t\u00edtulos de distintos tama\u00f1os, etc., de forma simple. Para ello Jupyter nos permite usar Markdown , que es un lenguaje de marcado (markup) muy popular. Los lenguajes de markup son lenguajes ideados para procesar texto, algunos de los m\u00e1s conocidos son HTML y \\(\\LaTeX\\) . Markdown tiene como objetivo ser un lenguaje de sintaxis minimalista, simple de aprender y usar; de esa forma uno puede dar formato al texto pero sin perder demasiado tiempo en los detalles. La cantidad de tutoriales en la red sobre Markdown es inmenso, por lo que nos centraremos en indicar las opciones que m\u00e1s se utilizan. Texto en negrita/cursiva : El texto en negrita se indica entre dos pares de asteriscos. De este modo **palabra** aparecer\u00e1 como palabra . Por otro lado, el texto en cursiva se indica entre dos asteriscos simples; es decir *palabra* aparecer\u00e1 como palabra . Listas : Las listas en Markdown se realizan indicando un asterisco o un n\u00famero seguido de un punto si se desean listas numeradas. Markdown organiza autom\u00e1ticamente los items asign\u00e1ndoles el n\u00famero correcto. Inclusi\u00f3n de im\u00e1genes : La sintaxis para incluir im\u00e1genes en Markdown es ![nombre alternativo](direcci\u00f3n de la imagen) en donde el nombre alternativo aparecer\u00e1 en caso de que no se pueda cargar la im\u00e1gen y la direcci\u00f3n puede referirse a una imagen local o un enlace en Internet. Inclusi\u00f3n de c\u00f3digo HTML : El lenguaje Markdown es un subconjunto del lenguaje HTML y en donde se necesite un mayor control del formato, se puede incluir directamente el c\u00f3digo HTML. Enlaces : Las celdas de texto pueden contener enlaces, tanto a otras partes del documento, como a p\u00e1ginas en internet u otros archivos locales. Su sintaxis es [texto](direcci\u00f3n del enlace) . F\u00f3rmulas matem\u00e1ticas : Gracias al uso de MathJax , se puede incluir c\u00f3digo en \\(\\LaTeX\\) para mostrar todo tipo de f\u00f3rmulas y expresiones matem\u00e1ticas. Las f\u00f3rmulas dentro de una l\u00ednea de texto se escriben entre s\u00edmbolos de d\u00f3lar $...$ , mientras que las expresiones separadas del texto utilizan s\u00edmbolos de d\u00f3lar dobles $$...$$ . Los siguientes son ejemplos de f\u00f3rmulas matem\u00e1ticas escritas en \\(\\LaTeX\\) : \\[p(x) = 3x^2 + 5y^2 + x^2y^2\\] \\[e^{\\pi i} - 1 = 0\\] \\[\\lim_{x \\rightarrow \\infty} 3x+1\\] \\[\\sum_{n=1}^\\infty\\frac{1}{n^2}\\] \\[\\int_0^\\infty\\frac{\\sin x}{x}\\,\\mathrm{d}x=\\frac{\\pi}{2}\\] \\[R^2 = \\begin{pmatrix} c & s \\end{pmatrix} \\begin{pmatrix} 1 & 0\\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} c \\\\ s \\end{pmatrix} = c^2 + s^2\\] Algunos atajos importantes Completado mediantes Tabs. La completaci\u00f3n mediante tabs, especialmente para los atributos, es una forma conveniente de explorar la estructura de cualquier objeto con el que est\u00e9 tratando. Simplemente escriba object_name. <TAB> para ver los atributos del objeto. Adem\u00e1s de los objetos y palabras clave de Python, la finalizaci\u00f3n de pesta\u00f1as tambi\u00e9n funciona en nombres de archivos y directorios. import collections collections . # aprete la tecla <\ud835\udc47\ud835\udc34\ud835\udc35> Buscando ayuda En caso de necesitar ayuda sobre cualquier comando de Python , Jupyter nos ofrece una funci\u00f3n llamada help . En resumen, \u00a1suele ser m\u00e1s importante saber como buscar informaci\u00f3n que memorizarla! Por todo esto, Jupyter nos ofrece ayuda sobre cualquier comando agregando un signo de interrogaci\u00f3n ? luego del nombre del comando (y luego ejecutar la celda con la combinaci\u00f3n de teclas SHIFT + ENTER). import numpy as np np . sum ? Magias (magics). Jupyter posee varias funciones m\u00e1gicas predefinidas que sirven para simplificar tareas comunes. Hay dos tipos de magias : Magias por linea (line magics): son comandos que empiezan con el caracter % y que toman como argumentos valores escritos en la misma l\u00ednea. Magias por celda (cell magics): son comandos que empiezan con los caracteres %% , y que reciben argumentos en la misma l\u00ednea y en toda la celda. En general solo se puede usar una sola m\u00e1gias por celda en cada celda y debe ser escrita en la primer linea de la celda . Un buen ejemplo de m\u00e1gia es %lsmagic que lista todas las magias disponibles: % lsmagic Available line magics: %alias %alias_magic %autoawait %autocall %automagic %autosave %bookmark %cd %clear %cls %colors %conda %config %connect_info %copy %ddir %debug %dhist %dirs %doctest_mode %echo %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %macro %magic %matplotlib %mkdir %more %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %pip %popd %pprint %precision %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %ren %rep %rerun %reset %reset_selective %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmode Available cell magics: %%! %%HTML %%SVG %%bash %%capture %%cmd %%debug %%file %%html %%javascript %%js %%latex %%markdown %%perl %%prun %%pypy %%python %%python2 %%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit %%writefile Automagic is ON, % prefix IS NOT needed for line magics. Tiempo por celda En varias situaciones resulta necesario medir el tiempo de ejecuci\u00f3n de una porci\u00f3n de c\u00f3digo. Para ello podemos usar la magia %timeit . Esta magia est\u00e1 disponible tanto para l\u00ednea como para celda: %% timeit 1 + 1 # timeit repite (adaptativamente) la medici\u00f3n a fin de reducir el error. 15.3 ns \u00b1 0.578 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000000 loops each) Comandos bash Jupyter permite tambi\u00e9n mezclar varios lenguajes de programaci\u00f3n en una misma notebook. Por ejemplo, podr\u00edamos escribir en bash lo siguiente: %%bash for i in { 3 ..1 } ; do echo $i done echo \"Hola desde $BASH \" 3 2 1 Hola desde /bin/bash Referencia Notebook Basics Running the Notebook","title":"Jupyter Notebook"},{"location":"lectures/basic_tools/lecture_014_jupyter/#jupyter-notebook","text":"","title":"Jupyter Notebook"},{"location":"lectures/basic_tools/lecture_014_jupyter/#funciones-basicas","text":"Jupyter Notebook es una herramienta de desarrollo para facilitar la programaci\u00f3n. Est\u00e1 orientada a la Computaci\u00f3n Cient\u00edfica y a la Ciencia de Datos. Es un entorno de computaci\u00f3n interactivo agn\u00f3stico, se puede ocupar en R, python o Julia. Jupyter notebook ofrece muchas herramientas que ser\u00e1n de gran utilidad a lo largo de este curso.","title":"Funciones B\u00e1sicas"},{"location":"lectures/basic_tools/lecture_014_jupyter/#toolbox","text":"Jupyter notebook nos ofrece el siguiente toolbox: File : En \u00e9l, puede crear un nuevo cuaderno o abrir uno preexistente. Aqu\u00ed es tambi\u00e9n a donde ir\u00eda para cambiar el nombre de un Cuaderno. Creo que el elemento de men\u00fa m\u00e1s interesante es la opci\u00f3n Guardar y Checkpoint. Esto le permite crear puntos de control a los que puede retroceder si lo necesita. Edit : Aqu\u00ed puede cortar, copiar y pegar celdas. Aqu\u00ed tambi\u00e9n es donde ir\u00edas si quisieras eliminar, dividir o fusionar una celda. Puede reordenar celdas aqu\u00ed tambi\u00e9n. View : es \u00fatil para alternar la visibilidad del encabezado y la barra de herramientas. Tambi\u00e9n puede activar o desactivar los n\u00fameros de l\u00ednea dentro de las celdas. Aqu\u00ed tambi\u00e9n es donde ir\u00edas si quieres meterte con la barra de herramientas de la celda. Insert : es solo para insertar celdas encima o debajo de la celda seleccionada actualmente. Cell : le permite ejecutar una celda, un grupo de celdas o todas las celdas. Tambi\u00e9n puede ir aqu\u00ed para cambiar el tipo de celda, aunque personalmente considero que la barra de herramientas es m\u00e1s intuitiva para eso. Kernel : es para trabajar con el kernel que se ejecuta en segundo plano. Aqu\u00ed puede reiniciar el kernel, volver a conectarlo, apagarlo o incluso cambiar el kernel que est\u00e1 utilizando su computadora port\u00e1til. Widgets : es para guardar y borrar el estado del widget. Los widgets son b\u00e1sicamente widgets de JavaScript que puede agregar a sus celdas para crear contenido din\u00e1mico utilizando Python (u otro Kernel). Help : es donde debe aprender sobre los atajos de teclado del Notebook, un recorrido por la interfaz de usuario y mucho material de referencia. A medida que se avance en el cuso se entrar\u00e1 en detalle en cada una de estas herramientas. Ahora se ense\u00f1ar\u00e1 las virtudes de los notebooks en aspectos de presentaci\u00f3n tipo latex (markdown) y algunos atajos importantes que nos ayudar\u00e1n en el desarrollo de c\u00f3digos.","title":"Toolbox"},{"location":"lectures/basic_tools/lecture_014_jupyter/#markdown","text":"Jupyter Notebook permite que escribamos texto formateado, es decir, texto con cursiva, negritas, t\u00edtulos de distintos tama\u00f1os, etc., de forma simple. Para ello Jupyter nos permite usar Markdown , que es un lenguaje de marcado (markup) muy popular. Los lenguajes de markup son lenguajes ideados para procesar texto, algunos de los m\u00e1s conocidos son HTML y \\(\\LaTeX\\) . Markdown tiene como objetivo ser un lenguaje de sintaxis minimalista, simple de aprender y usar; de esa forma uno puede dar formato al texto pero sin perder demasiado tiempo en los detalles. La cantidad de tutoriales en la red sobre Markdown es inmenso, por lo que nos centraremos en indicar las opciones que m\u00e1s se utilizan. Texto en negrita/cursiva : El texto en negrita se indica entre dos pares de asteriscos. De este modo **palabra** aparecer\u00e1 como palabra . Por otro lado, el texto en cursiva se indica entre dos asteriscos simples; es decir *palabra* aparecer\u00e1 como palabra . Listas : Las listas en Markdown se realizan indicando un asterisco o un n\u00famero seguido de un punto si se desean listas numeradas. Markdown organiza autom\u00e1ticamente los items asign\u00e1ndoles el n\u00famero correcto. Inclusi\u00f3n de im\u00e1genes : La sintaxis para incluir im\u00e1genes en Markdown es ![nombre alternativo](direcci\u00f3n de la imagen) en donde el nombre alternativo aparecer\u00e1 en caso de que no se pueda cargar la im\u00e1gen y la direcci\u00f3n puede referirse a una imagen local o un enlace en Internet. Inclusi\u00f3n de c\u00f3digo HTML : El lenguaje Markdown es un subconjunto del lenguaje HTML y en donde se necesite un mayor control del formato, se puede incluir directamente el c\u00f3digo HTML. Enlaces : Las celdas de texto pueden contener enlaces, tanto a otras partes del documento, como a p\u00e1ginas en internet u otros archivos locales. Su sintaxis es [texto](direcci\u00f3n del enlace) . F\u00f3rmulas matem\u00e1ticas : Gracias al uso de MathJax , se puede incluir c\u00f3digo en \\(\\LaTeX\\) para mostrar todo tipo de f\u00f3rmulas y expresiones matem\u00e1ticas. Las f\u00f3rmulas dentro de una l\u00ednea de texto se escriben entre s\u00edmbolos de d\u00f3lar $...$ , mientras que las expresiones separadas del texto utilizan s\u00edmbolos de d\u00f3lar dobles $$...$$ . Los siguientes son ejemplos de f\u00f3rmulas matem\u00e1ticas escritas en \\(\\LaTeX\\) : \\[p(x) = 3x^2 + 5y^2 + x^2y^2\\] \\[e^{\\pi i} - 1 = 0\\] \\[\\lim_{x \\rightarrow \\infty} 3x+1\\] \\[\\sum_{n=1}^\\infty\\frac{1}{n^2}\\] \\[\\int_0^\\infty\\frac{\\sin x}{x}\\,\\mathrm{d}x=\\frac{\\pi}{2}\\] \\[R^2 = \\begin{pmatrix} c & s \\end{pmatrix} \\begin{pmatrix} 1 & 0\\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} c \\\\ s \\end{pmatrix} = c^2 + s^2\\]","title":"Markdown"},{"location":"lectures/basic_tools/lecture_014_jupyter/#algunos-atajos-importantes","text":"","title":"Algunos atajos importantes"},{"location":"lectures/basic_tools/lecture_014_jupyter/#completado-mediantes-tabs","text":"La completaci\u00f3n mediante tabs, especialmente para los atributos, es una forma conveniente de explorar la estructura de cualquier objeto con el que est\u00e9 tratando. Simplemente escriba object_name. <TAB> para ver los atributos del objeto. Adem\u00e1s de los objetos y palabras clave de Python, la finalizaci\u00f3n de pesta\u00f1as tambi\u00e9n funciona en nombres de archivos y directorios. import collections collections . # aprete la tecla <\ud835\udc47\ud835\udc34\ud835\udc35>","title":"Completado mediantes Tabs."},{"location":"lectures/basic_tools/lecture_014_jupyter/#buscando-ayuda","text":"En caso de necesitar ayuda sobre cualquier comando de Python , Jupyter nos ofrece una funci\u00f3n llamada help . En resumen, \u00a1suele ser m\u00e1s importante saber como buscar informaci\u00f3n que memorizarla! Por todo esto, Jupyter nos ofrece ayuda sobre cualquier comando agregando un signo de interrogaci\u00f3n ? luego del nombre del comando (y luego ejecutar la celda con la combinaci\u00f3n de teclas SHIFT + ENTER). import numpy as np np . sum ?","title":"Buscando ayuda"},{"location":"lectures/basic_tools/lecture_014_jupyter/#magias-magics","text":"Jupyter posee varias funciones m\u00e1gicas predefinidas que sirven para simplificar tareas comunes. Hay dos tipos de magias : Magias por linea (line magics): son comandos que empiezan con el caracter % y que toman como argumentos valores escritos en la misma l\u00ednea. Magias por celda (cell magics): son comandos que empiezan con los caracteres %% , y que reciben argumentos en la misma l\u00ednea y en toda la celda. En general solo se puede usar una sola m\u00e1gias por celda en cada celda y debe ser escrita en la primer linea de la celda . Un buen ejemplo de m\u00e1gia es %lsmagic que lista todas las magias disponibles: % lsmagic Available line magics: %alias %alias_magic %autoawait %autocall %automagic %autosave %bookmark %cd %clear %cls %colors %conda %config %connect_info %copy %ddir %debug %dhist %dirs %doctest_mode %echo %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %macro %magic %matplotlib %mkdir %more %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %pip %popd %pprint %precision %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %ren %rep %rerun %reset %reset_selective %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmode Available cell magics: %%! %%HTML %%SVG %%bash %%capture %%cmd %%debug %%file %%html %%javascript %%js %%latex %%markdown %%perl %%prun %%pypy %%python %%python2 %%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit %%writefile Automagic is ON, % prefix IS NOT needed for line magics.","title":"Magias (magics)."},{"location":"lectures/basic_tools/lecture_014_jupyter/#tiempo-por-celda","text":"En varias situaciones resulta necesario medir el tiempo de ejecuci\u00f3n de una porci\u00f3n de c\u00f3digo. Para ello podemos usar la magia %timeit . Esta magia est\u00e1 disponible tanto para l\u00ednea como para celda: %% timeit 1 + 1 # timeit repite (adaptativamente) la medici\u00f3n a fin de reducir el error. 15.3 ns \u00b1 0.578 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000000 loops each)","title":"Tiempo por celda"},{"location":"lectures/basic_tools/lecture_014_jupyter/#comandos-bash","text":"Jupyter permite tambi\u00e9n mezclar varios lenguajes de programaci\u00f3n en una misma notebook. Por ejemplo, podr\u00edamos escribir en bash lo siguiente: %%bash for i in { 3 ..1 } ; do echo $i done echo \"Hola desde $BASH \" 3 2 1 Hola desde /bin/bash","title":"Comandos bash"},{"location":"lectures/basic_tools/lecture_014_jupyter/#referencia","text":"Notebook Basics Running the Notebook","title":"Referencia"},{"location":"lectures/basic_tools/lecture_015_git/","text":"Git Introducci\u00f3n Git es un software de control de versiones dise\u00f1ado por Linus Torvalds, pensando en la eficiencia, la confiabilidad y compatibilidad del mantenimiento de versiones de aplicaciones cuando estas tienen un gran n\u00famero de archivos de c\u00f3digo fuente. Su prop\u00f3sito es llevar registro de los cambios en archivos de computadora incluyendo coordinar el trabajo que varias personas realizan sobre archivos compartidos en un repositorio de c\u00f3digo. Al principio, Git se pens\u00f3 como un motor de bajo nivel sobre el cual otros pudieran escribir la interfaz de usuario o front end como Cogito o StGIT. Sin embargo, Git se ha convertido desde entonces en un sistema de control de versiones con funcionalidad plena. Hay algunos proyectos de mucha relevancia que ya usan Git, en particular, el grupo de programaci\u00f3n del n\u00facleo Linux. El mantenimiento del software Git est\u00e1 actualmente (2009) supervisado por Junio Hamano, quien recibe contribuciones al c\u00f3digo de alrededor de 280 programadores. En cuanto a derechos de autor Git es un software libre distribuible bajo los t\u00e9rminos de la versi\u00f3n 2 de la Licencia P\u00fablica General de GNU. Comandos b\u00e1sicos Configuraci\u00f3n inicial Abra su terminal de Git para comenzar con la ejecuci\u00f3n de comandos, por ejemplo, abrir\u00e1 el programa Git bash en Windows para ingresar a la l\u00ednea de comandos de este programa. Una vez que ingrese, use el siguiente comando para establecer el nombre de usuario de git: git config --global user.name \"tunombre\" ! git config -- global user . name Recuerde sustituir el texto entre comillas por su nombre real. Ahora indique el correo electr\u00f3nico del usuario para git: git config --global user.email \"tuemail\" ! git config -- global user . email crea un repositorio nuevo Crea un directorio nuevo, \u00e1brelo y ejecuta git init para crear un nuevo repositorio de git. hacer checkout a un repositorio Crea una copia local del repositorio ejecutando: git clone /path/to/repository Si utilizas un servidor remoto, ejecuta: git clone username@host:/path/to/repository flujo de trabajo Tu repositorio local esta compuesto por tres \"\u00e1rboles\" administrados por git. El primero es tu Directorio de trabajo que contiene los archivos, el segundo es el Index que actua como una zona intermedia, y el \u00faltimo es el HEAD que apunta al \u00faltimo commit realizado. add & commit Puedes registrar cambios (a\u00f1adirlos al Index) usando git add <filename> git add . Este es el primer paso en el flujo de trabajo b\u00e1sico. Para hacer commit a estos cambios usa git commit -m \"Commit message\" Ahora el archivo esta inclu\u00eddo en el HEAD , pero a\u00fan no en tu repositorio remoto. ramas (branches) Las ramas son utilizadas para desarrollar funcionalidades aisladas unas de otras. La rama master es la rama \"por defecto\" cuando creas un repositorio. Crea nuevas ramas durante el desarrollo y fusi\u00f3nalas a la rama principal cuando termines. Crea una nueva rama llamada \"feature_x\" y c\u00e1mbiate a ella usando git checkout -b feature_x vuelve a la rama principal git checkout master y borra la rama git branch -d feature_x Una rama nueva no estar\u00e1 disponible para los dem\u00e1s a menos que subas (push) la rama a tu repositorio remoto git push origin <branch> actualiza & fusiona (pull & merge) Para actualizar tu repositorio local al commit m\u00e1s nuevo, ejecuta git pull en tu directorio de trabajo para bajar y fusionar los cambios remotos. Para fusionar otra rama a tu rama activa (por ejemplo master), utiliza git merge <branch> en ambos casos git intentar\u00e1 fusionar autom\u00e1ticamente los cambios. Desafortunadamente, no siempre ser\u00e1 posible y se podr\u00e1n producir conflictos. T\u00fa eres responsable de fusionar esos conflictos manualmente al editar los archivos mostrados por git. Despu\u00e9s de modificarlos, necesitas marcarlos como fusionados con git add <filename> Antes de fusionar los cambios, puedes revisarlos usando git diff <source_branch> <target_branch>``` gitignore El archivo .gitignore , es un archivo de texto que le dice a Git qu\u00e9 archivos o carpetas ignorar en un proyecto. Un archivo local .gitignore generalmente se coloca en el directorio ra\u00edz de un proyecto. Tambi\u00e9n puedes crear un archivo global .gitignore , y cualquier entrada en ese archivo se ignorar\u00e1 en todos tus repositorios de Git. Las entradas de este archivo tambi\u00e9n pueden seguir un patr\u00f3n coincidente: * se utiliza como una coincidencia comod\u00edn. / se usa para ignorar las rutas relativas al archivo .gitignore. # es usado para agregar comentarios reemplaza cambios locales En caso de que hagas algo mal (lo que seguramente nunca suceda ;) puedes reemplazar cambios locales usando el comando git checkout -- <filename> Este comando reemplaza los cambios en tu directorio de trabajo con el \u00faltimo contenido de HEAD . Los cambios que ya han sido agregados al Index, as\u00ed como tambi\u00e9n los nuevos archivos, se mantendr\u00e1n sin cambio. Por otro lado, si quieres deshacer todos los cambios locales y commits, puedes traer la \u00faltima versi\u00f3n del servidor y apuntar a tu copia local principal de esta forma git fetch origin git reset --hard origin/master Referencia La gu\u00eda sensilla","title":"Git"},{"location":"lectures/basic_tools/lecture_015_git/#git","text":"","title":"Git"},{"location":"lectures/basic_tools/lecture_015_git/#introduccion","text":"Git es un software de control de versiones dise\u00f1ado por Linus Torvalds, pensando en la eficiencia, la confiabilidad y compatibilidad del mantenimiento de versiones de aplicaciones cuando estas tienen un gran n\u00famero de archivos de c\u00f3digo fuente. Su prop\u00f3sito es llevar registro de los cambios en archivos de computadora incluyendo coordinar el trabajo que varias personas realizan sobre archivos compartidos en un repositorio de c\u00f3digo. Al principio, Git se pens\u00f3 como un motor de bajo nivel sobre el cual otros pudieran escribir la interfaz de usuario o front end como Cogito o StGIT. Sin embargo, Git se ha convertido desde entonces en un sistema de control de versiones con funcionalidad plena. Hay algunos proyectos de mucha relevancia que ya usan Git, en particular, el grupo de programaci\u00f3n del n\u00facleo Linux. El mantenimiento del software Git est\u00e1 actualmente (2009) supervisado por Junio Hamano, quien recibe contribuciones al c\u00f3digo de alrededor de 280 programadores. En cuanto a derechos de autor Git es un software libre distribuible bajo los t\u00e9rminos de la versi\u00f3n 2 de la Licencia P\u00fablica General de GNU.","title":"Introducci\u00f3n"},{"location":"lectures/basic_tools/lecture_015_git/#comandos-basicos","text":"","title":"Comandos b\u00e1sicos"},{"location":"lectures/basic_tools/lecture_015_git/#configuracion-inicial","text":"Abra su terminal de Git para comenzar con la ejecuci\u00f3n de comandos, por ejemplo, abrir\u00e1 el programa Git bash en Windows para ingresar a la l\u00ednea de comandos de este programa. Una vez que ingrese, use el siguiente comando para establecer el nombre de usuario de git: git config --global user.name \"tunombre\" ! git config -- global user . name Recuerde sustituir el texto entre comillas por su nombre real. Ahora indique el correo electr\u00f3nico del usuario para git: git config --global user.email \"tuemail\" ! git config -- global user . email","title":"Configuraci\u00f3n inicial"},{"location":"lectures/basic_tools/lecture_015_git/#crea-un-repositorio-nuevo","text":"Crea un directorio nuevo, \u00e1brelo y ejecuta git init para crear un nuevo repositorio de git.","title":"crea un repositorio nuevo"},{"location":"lectures/basic_tools/lecture_015_git/#hacer-checkout-a-un-repositorio","text":"Crea una copia local del repositorio ejecutando: git clone /path/to/repository Si utilizas un servidor remoto, ejecuta: git clone username@host:/path/to/repository","title":"hacer checkout a un repositorio"},{"location":"lectures/basic_tools/lecture_015_git/#flujo-de-trabajo","text":"Tu repositorio local esta compuesto por tres \"\u00e1rboles\" administrados por git. El primero es tu Directorio de trabajo que contiene los archivos, el segundo es el Index que actua como una zona intermedia, y el \u00faltimo es el HEAD que apunta al \u00faltimo commit realizado.","title":"flujo de trabajo"},{"location":"lectures/basic_tools/lecture_015_git/#add-commit","text":"Puedes registrar cambios (a\u00f1adirlos al Index) usando git add <filename> git add . Este es el primer paso en el flujo de trabajo b\u00e1sico. Para hacer commit a estos cambios usa git commit -m \"Commit message\" Ahora el archivo esta inclu\u00eddo en el HEAD , pero a\u00fan no en tu repositorio remoto.","title":"add &amp; commit"},{"location":"lectures/basic_tools/lecture_015_git/#ramas-branches","text":"Las ramas son utilizadas para desarrollar funcionalidades aisladas unas de otras. La rama master es la rama \"por defecto\" cuando creas un repositorio. Crea nuevas ramas durante el desarrollo y fusi\u00f3nalas a la rama principal cuando termines. Crea una nueva rama llamada \"feature_x\" y c\u00e1mbiate a ella usando git checkout -b feature_x vuelve a la rama principal git checkout master y borra la rama git branch -d feature_x Una rama nueva no estar\u00e1 disponible para los dem\u00e1s a menos que subas (push) la rama a tu repositorio remoto git push origin <branch>","title":"ramas (branches)"},{"location":"lectures/basic_tools/lecture_015_git/#actualiza-fusiona-pull-merge","text":"Para actualizar tu repositorio local al commit m\u00e1s nuevo, ejecuta git pull en tu directorio de trabajo para bajar y fusionar los cambios remotos. Para fusionar otra rama a tu rama activa (por ejemplo master), utiliza git merge <branch> en ambos casos git intentar\u00e1 fusionar autom\u00e1ticamente los cambios. Desafortunadamente, no siempre ser\u00e1 posible y se podr\u00e1n producir conflictos. T\u00fa eres responsable de fusionar esos conflictos manualmente al editar los archivos mostrados por git. Despu\u00e9s de modificarlos, necesitas marcarlos como fusionados con git add <filename> Antes de fusionar los cambios, puedes revisarlos usando git diff <source_branch> <target_branch>```","title":"actualiza &amp; fusiona (pull &amp; merge)"},{"location":"lectures/basic_tools/lecture_015_git/#gitignore","text":"El archivo .gitignore , es un archivo de texto que le dice a Git qu\u00e9 archivos o carpetas ignorar en un proyecto. Un archivo local .gitignore generalmente se coloca en el directorio ra\u00edz de un proyecto. Tambi\u00e9n puedes crear un archivo global .gitignore , y cualquier entrada en ese archivo se ignorar\u00e1 en todos tus repositorios de Git. Las entradas de este archivo tambi\u00e9n pueden seguir un patr\u00f3n coincidente: * se utiliza como una coincidencia comod\u00edn. / se usa para ignorar las rutas relativas al archivo .gitignore. # es usado para agregar comentarios","title":"gitignore"},{"location":"lectures/basic_tools/lecture_015_git/#reemplaza-cambios-locales","text":"En caso de que hagas algo mal (lo que seguramente nunca suceda ;) puedes reemplazar cambios locales usando el comando git checkout -- <filename> Este comando reemplaza los cambios en tu directorio de trabajo con el \u00faltimo contenido de HEAD . Los cambios que ya han sido agregados al Index, as\u00ed como tambi\u00e9n los nuevos archivos, se mantendr\u00e1n sin cambio. Por otro lado, si quieres deshacer todos los cambios locales y commits, puedes traer la \u00faltima versi\u00f3n del servidor y apuntar a tu copia local principal de esta forma git fetch origin git reset --hard origin/master","title":"reemplaza cambios locales"},{"location":"lectures/basic_tools/lecture_015_git/#referencia","text":"La gu\u00eda sensilla","title":"Referencia"},{"location":"lectures/basic_tools/lecture_016_colab/","text":"Google Colab Si ya conoces Colab, echa un vistazo a este v\u00eddeo para obtener informaci\u00f3n sobre las tablas interactivas, la vista del historial de c\u00f3digo ejecutado y la paleta de comandos. \u00bfQu\u00e9 es Colaboratory? Colab, tambi\u00e9n conocido como \"Colaboratory\", te permite programar y ejecutar Python en tu navegador con las siguientes ventajas: - No requiere configuraci\u00f3n - Da acceso gratuito a GPUs - Permite compartir contenido f\u00e1cilmente Colab puede facilitar tu trabajo, ya seas estudiante , cient\u00edfico de datos o investigador de IA . No te pierdas el v\u00eddeo de Introducci\u00f3n a Colab para obtener m\u00e1s informaci\u00f3n. O simplemente empieza con los pasos descritos m\u00e1s abajo. Nota : Para ocupar un notebook de Google Colab, debes preseionar el siguiente icono (a menudo se encuentra en la cabezera del proyecto): Primeros pasos El documento que est\u00e1s leyendo no es una p\u00e1gina web est\u00e1tica, sino un entorno interactivo denominado cuaderno de Colab que te permite escribir y ejecutar c\u00f3digo. Por ejemplo, a continuaci\u00f3n se muestra una celda de c\u00f3digo con una breve secuencia de comandos de Python que calcula un valor, lo almacena en una variable e imprime el resultado: seconds_in_a_day = 24 * 60 * 60 seconds_in_a_day 86400 Si quieres ejecutar el c\u00f3digo de la celda anterior, haz clic para seleccionarlo y pulsa el bot\u00f3n de reproducir situado a la izquierda del c\u00f3digo o usa la combinaci\u00f3n de teclas \"Comando/Ctrl + Intro\". Para editar el c\u00f3digo, solo tienes que hacer clic en la celda. Las variables que definas en una celda se pueden usar despu\u00e9s en otras celdas: seconds_in_a_week = 7 * seconds_in_a_day seconds_in_a_week 604800 Los cuadernos de Colab te permiten combinar c\u00f3digo ejecutable y texto enriquecido en un mismo documento, adem\u00e1s de im\u00e1genes , HTML , LaTeX y mucho m\u00e1s. Los cuadernos que creas en Colab se almacenan en tu cuenta de Google Drive. Puedes compartir tus cuadernos de Colab f\u00e1cilmente con compa\u00f1eros de trabajo o amigos, lo que les permite comentarlos o incluso editarlos. Consulta m\u00e1s informaci\u00f3n en Informaci\u00f3n general sobre Colab . Para crear un cuaderno de Colab, puedes usar el men\u00fa Archivo que aparece arriba o bien acceder al enlace para crear un cuaderno de Colab . Los cuadernos de Colab son cuadernos de Jupyter alojados en Colab. Para obtener m\u00e1s informaci\u00f3n sobre el proyecto Jupyter, visita jupyter.org . Ciencia de datos Con Colab, puedes aprovechar toda la potencia de las bibliotecas m\u00e1s populares de Python para analizar y visualizar datos. La celda de c\u00f3digo de abajo utiliza NumPy para generar datos aleatorios y Matplotlib para visualizarlos. Para editar el c\u00f3digo, solo tienes que hacer clic en la celda. import numpy as np from matplotlib import pyplot as plt ys = 200 + np . random . randn ( 100 ) x = [ x for x in range ( len ( ys ))] plt . plot ( x , ys , '-' ) plt . fill_between ( x , ys , 195 , where = ( ys > 195 ), facecolor = 'g' , alpha = 0.6 ) plt . title ( \"Sample Visualization\" ) plt . show () Puedes importar tus propios datos a los cuadernos de Colab desde tu cuenta de Google Drive, incluidas las hojas de c\u00e1lculo, y tambi\u00e9n desde GitHub y muchas fuentes m\u00e1s. Para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo importar datos y c\u00f3mo se puede usar Colab en la ciencia de datos, consulta los enlaces que aparecen en la secci\u00f3n Trabajar con datos m\u00e1s abajo. Aprendizaje autom\u00e1tico Con Colab, puedes importar un conjunto de datos de im\u00e1genes, entrenar un clasificador de im\u00e1genes con dicho conjunto de datos y evaluar el modelo con tan solo usar unas pocas l\u00edneas de c\u00f3digo . Los cuadernos de Colab ejecutan c\u00f3digo en los servidores en la nube de Google, lo que te permite aprovechar la potencia del hardware de Google, incluidas las GPU y TPU , independientemente de la potencia de tu equipo. Lo \u00fanico que necesitas es un navegador. Colab es una herramienta muy utilizada en la comunidad de aprendizaje autom\u00e1tico. Estos son algunos ejemplos de las aplicaciones que tiene Colab: - Dar los primeros pasos con TensorFlow - Desarrollar y entrenar redes neuronales - Experimentar con TPUs - Divulgar datos de investigaci\u00f3n sobre IA - Crear tutoriales Para ver cuadernos de Colab que demuestran las aplicaciones del aprendizaje autom\u00e1tico, consulta los ejemplos de aprendizaje autom\u00e1tico de abajo. M\u00e1s recursos Trabajar con cuadernos en Colab Informaci\u00f3n general sobre Colaboratory Gu\u00eda de Markdown Importar bibliotecas e instalar dependencias Guardar y cargar cuadernos en GitHub Formularios interactivos Widgets interactivos TensorFlow 2 en Colab ( Nuevo ) Trabajar con datos Cargar datos: Drive, Hojas de c\u00e1lculo y Google Cloud Storage Gr\u00e1ficos: visualizaci\u00f3n de datos Primeros pasos con BigQuery Curso intensivo de aprendizaje autom\u00e1tico A continuaci\u00f3n, se muestran algunos cuadernos del curso online de Google sobre aprendizaje autom\u00e1tico. Para obtener m\u00e1s informaci\u00f3n, consulta el sitio web del curso completo . - Introducci\u00f3n a Pandas DataFrame - Regresi\u00f3n lineal con tf.keras usando datos sint\u00e9ticos Uso de hardware acelerado TensorFlow con GPUs TensorFlow con TPUs Ejemplos destacados Reemplaza voces con NeMo : usa NeMo, el kit de herramientas de IA conversacional de Nvidia, para sustituir una voz de un fragmento de audio por otra generada por ordenador. Reentrenamiento de un clasificador de im\u00e1genes : crea un modelo de Keras sobre un clasificador de im\u00e1genes preparado previamente para que distinga flores. Clasificaci\u00f3n de textos : clasifica las rese\u00f1as de pel\u00edculas de IMDb en positivas o negativas . Transferencia de estilo : utiliza el aprendizaje profundo para transferir el estilo de una imagen a otra. Codificador universal de frases multiling\u00fce para preguntas y respuestas : utiliza un modelo de aprendizaje autom\u00e1tico para contestar preguntas con el conjunto de datos SQuAD. Interpolaci\u00f3n de v\u00eddeo : predice lo que ocurre entre el primer y el \u00faltimo fotograma de un v\u00eddeo.","title":"Google Colab"},{"location":"lectures/basic_tools/lecture_016_colab/#google-colab","text":"Si ya conoces Colab, echa un vistazo a este v\u00eddeo para obtener informaci\u00f3n sobre las tablas interactivas, la vista del historial de c\u00f3digo ejecutado y la paleta de comandos.","title":"Google Colab"},{"location":"lectures/basic_tools/lecture_016_colab/#que-es-colaboratory","text":"Colab, tambi\u00e9n conocido como \"Colaboratory\", te permite programar y ejecutar Python en tu navegador con las siguientes ventajas: - No requiere configuraci\u00f3n - Da acceso gratuito a GPUs - Permite compartir contenido f\u00e1cilmente Colab puede facilitar tu trabajo, ya seas estudiante , cient\u00edfico de datos o investigador de IA . No te pierdas el v\u00eddeo de Introducci\u00f3n a Colab para obtener m\u00e1s informaci\u00f3n. O simplemente empieza con los pasos descritos m\u00e1s abajo. Nota : Para ocupar un notebook de Google Colab, debes preseionar el siguiente icono (a menudo se encuentra en la cabezera del proyecto):","title":"\u00bfQu\u00e9 es Colaboratory?"},{"location":"lectures/basic_tools/lecture_016_colab/#primeros-pasos","text":"El documento que est\u00e1s leyendo no es una p\u00e1gina web est\u00e1tica, sino un entorno interactivo denominado cuaderno de Colab que te permite escribir y ejecutar c\u00f3digo. Por ejemplo, a continuaci\u00f3n se muestra una celda de c\u00f3digo con una breve secuencia de comandos de Python que calcula un valor, lo almacena en una variable e imprime el resultado: seconds_in_a_day = 24 * 60 * 60 seconds_in_a_day 86400 Si quieres ejecutar el c\u00f3digo de la celda anterior, haz clic para seleccionarlo y pulsa el bot\u00f3n de reproducir situado a la izquierda del c\u00f3digo o usa la combinaci\u00f3n de teclas \"Comando/Ctrl + Intro\". Para editar el c\u00f3digo, solo tienes que hacer clic en la celda. Las variables que definas en una celda se pueden usar despu\u00e9s en otras celdas: seconds_in_a_week = 7 * seconds_in_a_day seconds_in_a_week 604800 Los cuadernos de Colab te permiten combinar c\u00f3digo ejecutable y texto enriquecido en un mismo documento, adem\u00e1s de im\u00e1genes , HTML , LaTeX y mucho m\u00e1s. Los cuadernos que creas en Colab se almacenan en tu cuenta de Google Drive. Puedes compartir tus cuadernos de Colab f\u00e1cilmente con compa\u00f1eros de trabajo o amigos, lo que les permite comentarlos o incluso editarlos. Consulta m\u00e1s informaci\u00f3n en Informaci\u00f3n general sobre Colab . Para crear un cuaderno de Colab, puedes usar el men\u00fa Archivo que aparece arriba o bien acceder al enlace para crear un cuaderno de Colab . Los cuadernos de Colab son cuadernos de Jupyter alojados en Colab. Para obtener m\u00e1s informaci\u00f3n sobre el proyecto Jupyter, visita jupyter.org .","title":"Primeros pasos"},{"location":"lectures/basic_tools/lecture_016_colab/#ciencia-de-datos","text":"Con Colab, puedes aprovechar toda la potencia de las bibliotecas m\u00e1s populares de Python para analizar y visualizar datos. La celda de c\u00f3digo de abajo utiliza NumPy para generar datos aleatorios y Matplotlib para visualizarlos. Para editar el c\u00f3digo, solo tienes que hacer clic en la celda. import numpy as np from matplotlib import pyplot as plt ys = 200 + np . random . randn ( 100 ) x = [ x for x in range ( len ( ys ))] plt . plot ( x , ys , '-' ) plt . fill_between ( x , ys , 195 , where = ( ys > 195 ), facecolor = 'g' , alpha = 0.6 ) plt . title ( \"Sample Visualization\" ) plt . show () Puedes importar tus propios datos a los cuadernos de Colab desde tu cuenta de Google Drive, incluidas las hojas de c\u00e1lculo, y tambi\u00e9n desde GitHub y muchas fuentes m\u00e1s. Para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo importar datos y c\u00f3mo se puede usar Colab en la ciencia de datos, consulta los enlaces que aparecen en la secci\u00f3n Trabajar con datos m\u00e1s abajo.","title":"Ciencia de datos"},{"location":"lectures/basic_tools/lecture_016_colab/#aprendizaje-automatico","text":"Con Colab, puedes importar un conjunto de datos de im\u00e1genes, entrenar un clasificador de im\u00e1genes con dicho conjunto de datos y evaluar el modelo con tan solo usar unas pocas l\u00edneas de c\u00f3digo . Los cuadernos de Colab ejecutan c\u00f3digo en los servidores en la nube de Google, lo que te permite aprovechar la potencia del hardware de Google, incluidas las GPU y TPU , independientemente de la potencia de tu equipo. Lo \u00fanico que necesitas es un navegador. Colab es una herramienta muy utilizada en la comunidad de aprendizaje autom\u00e1tico. Estos son algunos ejemplos de las aplicaciones que tiene Colab: - Dar los primeros pasos con TensorFlow - Desarrollar y entrenar redes neuronales - Experimentar con TPUs - Divulgar datos de investigaci\u00f3n sobre IA - Crear tutoriales Para ver cuadernos de Colab que demuestran las aplicaciones del aprendizaje autom\u00e1tico, consulta los ejemplos de aprendizaje autom\u00e1tico de abajo.","title":"Aprendizaje autom\u00e1tico"},{"location":"lectures/basic_tools/lecture_016_colab/#mas-recursos","text":"","title":"M\u00e1s recursos"},{"location":"lectures/basic_tools/lecture_016_colab/#trabajar-con-cuadernos-en-colab","text":"Informaci\u00f3n general sobre Colaboratory Gu\u00eda de Markdown Importar bibliotecas e instalar dependencias Guardar y cargar cuadernos en GitHub Formularios interactivos Widgets interactivos TensorFlow 2 en Colab ( Nuevo )","title":"Trabajar con cuadernos en Colab"},{"location":"lectures/basic_tools/lecture_016_colab/#trabajar-con-datos","text":"Cargar datos: Drive, Hojas de c\u00e1lculo y Google Cloud Storage Gr\u00e1ficos: visualizaci\u00f3n de datos Primeros pasos con BigQuery","title":"Trabajar con datos"},{"location":"lectures/basic_tools/lecture_016_colab/#curso-intensivo-de-aprendizaje-automatico","text":"A continuaci\u00f3n, se muestran algunos cuadernos del curso online de Google sobre aprendizaje autom\u00e1tico. Para obtener m\u00e1s informaci\u00f3n, consulta el sitio web del curso completo . - Introducci\u00f3n a Pandas DataFrame - Regresi\u00f3n lineal con tf.keras usando datos sint\u00e9ticos","title":"Curso intensivo de aprendizaje autom\u00e1tico"},{"location":"lectures/basic_tools/lecture_016_colab/#uso-de-hardware-acelerado","text":"TensorFlow con GPUs TensorFlow con TPUs","title":"Uso de hardware acelerado"},{"location":"lectures/basic_tools/lecture_016_colab/#ejemplos-destacados","text":"Reemplaza voces con NeMo : usa NeMo, el kit de herramientas de IA conversacional de Nvidia, para sustituir una voz de un fragmento de audio por otra generada por ordenador. Reentrenamiento de un clasificador de im\u00e1genes : crea un modelo de Keras sobre un clasificador de im\u00e1genes preparado previamente para que distinga flores. Clasificaci\u00f3n de textos : clasifica las rese\u00f1as de pel\u00edculas de IMDb en positivas o negativas . Transferencia de estilo : utiliza el aprendizaje profundo para transferir el estilo de una imagen a otra. Codificador universal de frases multiling\u00fce para preguntas y respuestas : utiliza un modelo de aprendizaje autom\u00e1tico para contestar preguntas con el conjunto de datos SQuAD. Interpolaci\u00f3n de v\u00eddeo : predice lo que ocurre entre el primer y el \u00faltimo fotograma de un v\u00eddeo.","title":"Ejemplos destacados"}]}